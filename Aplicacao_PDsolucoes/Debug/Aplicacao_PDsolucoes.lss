
Aplicacao_PDsolucoes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800100  00000d7a  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000263  00800392  00800392  000010a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001671  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00002879  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dee  00000000  00000000  0000323f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c1  00000000  00000000  0000485b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3f       	cpi	r26, 0xF5	; 245
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d2 05 	call	0xba4	; 0xba4 <main>
  9e:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EepromWrite>:
 */ 
#include <comum.h>

void EepromWrite(unsigned int uiAddress, unsigned char ucData)
{
	cli();
  a6:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  a8:	f9 99       	sbic	0x1f, 1	; 31
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <EepromWrite+0x2>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  ac:	92 bd       	out	0x22, r25	; 34
  ae:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  b0:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  b2:	8f b3       	in	r24, 0x1f	; 31
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  b8:	8f b3       	in	r24, 0x1f	; 31
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8f bb       	out	0x1f, r24	; 31
	sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <EepromRead>:
}
unsigned char EepromRead(unsigned int uiAddress)
{
	cli();
  c2:	f8 94       	cli
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  c4:	f9 99       	sbic	0x1f, 1	; 31
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <EepromRead+0x2>
	;
	/* Set up address register */
	EEAR = uiAddress;
  c8:	92 bd       	out	0x22, r25	; 34
  ca:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  cc:	8f b3       	in	r24, 0x1f	; 31
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	sei();
  d2:	78 94       	sei
	return EEDR;
  d4:	80 b5       	in	r24, 0x20	; 32
	
}
  d6:	08 95       	ret

000000d8 <ConfigGpio>:
 */ 
#include <comum.h>

void ConfigGpio( void ){
	
	DDRC = (1 << DDC1) | (1 << DDC0);  // Define PC0 e PC1 como saída
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	87 b9       	out	0x07, r24	; 7
	PORTC = (1 << PORTC3) | (1 << PORTC2);	// Define PC2 e PC3 com Pull-up	
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	88 b9       	out	0x08, r24	; 8
	LED1_OFF;
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	88 b9       	out	0x08, r24	; 8
	LED2_OFF;
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	08 95       	ret

000000ee <InicializaStruct>:
		MenuPrincipal();	// Chama o menu principal 			
    }
}

void InicializaStruct( void )	
{
  ee:	bf 92       	push	r11
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	unsigned char contDados, flagFim = 0;
	if( EepromRead(0x00) != 0xFF )  // Se EepromRead(0x00) diferente a 0xFF
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 108:	8f 3f       	cpi	r24, 0xFF	; 255
 10a:	09 f0       	breq	.+2      	; 0x10e <InicializaStruct+0x20>
 10c:	88 c0       	rjmp	.+272    	; 0x21e <InicializaStruct+0x130>
 10e:	8d c0       	rjmp	.+282    	; 0x22a <InicializaStruct+0x13c>
	{
		for( unsigned char contCadastros = 0; contCadastros < QUANTIDADE_CADASTROS; contCadastros++ )// Loop para todos os cadastros
		{	
			for( contDados = g_contDadosMemoria * QUANTIDADE_DADOS; 
 110:	f0 90 98 03 	lds	r15, 0x0398	; 0x800398 <g_contDadosMemoria>
 114:	ff 0c       	add	r15, r15
 116:	ff 0c       	add	r15, r15
 118:	8f 2d       	mov	r24, r15
 11a:	88 0f       	add	r24, r24
 11c:	88 0f       	add	r24, r24
 11e:	f8 0e       	add	r15, r24
 120:	61 c0       	rjmp	.+194    	; 0x1e4 <InicializaStruct+0xf6>
				 contDados < QUANTIDADE_DADOS * (g_contDadosMemoria + 1);
				 contDados++ )// Loop para os dados cadastrados	
			{
				if( EepromRead( contDados ) == 0xFF )	// Se EepromRead(dadosCadastrados) igual a 0xFF
 122:	0f 2d       	mov	r16, r15
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	c8 01       	movw	r24, r16
 128:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 12c:	8f 3f       	cpi	r24, 0xFF	; 255
 12e:	09 f4       	brne	.+2      	; 0x132 <InicializaStruct+0x44>
 130:	6b c0       	rjmp	.+214    	; 0x208 <InicializaStruct+0x11a>
					flagFim = 1;
					break;// break;
				}			
				else  // Senão
				{
					if( contDados % QUANTIDADE_DADOS < 12 )	// Se contDados é menor que 12, lê o nome armazenado
 132:	cd ec       	ldi	r28, 0xCD	; 205
 134:	fc 9e       	mul	r15, r28
 136:	c1 2d       	mov	r28, r1
 138:	11 24       	eor	r1, r1
 13a:	c2 95       	swap	r28
 13c:	cf 70       	andi	r28, 0x0F	; 15
 13e:	cc 0f       	add	r28, r28
 140:	cc 0f       	add	r28, r28
 142:	8c 2f       	mov	r24, r28
 144:	88 0f       	add	r24, r24
 146:	88 0f       	add	r24, r24
 148:	c8 0f       	add	r28, r24
 14a:	8f 2d       	mov	r24, r15
 14c:	8c 1b       	sub	r24, r28
 14e:	8c 30       	cpi	r24, 0x0C	; 12
 150:	98 f4       	brcc	.+38     	; 0x178 <InicializaStruct+0x8a>
					{		
						CadastroUsuarios[contCadastros].nome[ contDados % QUANTIDADE_DADOS] = EepromRead( contDados );
 152:	ce 2c       	mov	r12, r14
 154:	d1 2c       	mov	r13, r1
 156:	c8 2f       	mov	r28, r24
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	c8 01       	movw	r24, r16
 15c:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 160:	94 e1       	ldi	r25, 0x14	; 20
 162:	9c 9d       	mul	r25, r12
 164:	90 01       	movw	r18, r0
 166:	9d 9d       	mul	r25, r13
 168:	30 0d       	add	r19, r0
 16a:	11 24       	eor	r1, r1
 16c:	23 56       	subi	r18, 0x63	; 99
 16e:	3c 4f       	sbci	r19, 0xFC	; 252
 170:	c2 0f       	add	r28, r18
 172:	d3 1f       	adc	r29, r19
 174:	88 83       	st	Y, r24
 176:	35 c0       	rjmp	.+106    	; 0x1e2 <InicializaStruct+0xf4>
					}
					else if( contDados % QUANTIDADE_DADOS < 18 ) // Se contDados é menor que 18, lê a senha
 178:	82 31       	cpi	r24, 0x12	; 18
 17a:	a0 f4       	brcc	.+40     	; 0x1a4 <InicializaStruct+0xb6>
					{
						CadastroUsuarios[contCadastros].senha[ contDados % QUANTIDADE_DADOS-12] = EepromRead( contDados );
 17c:	ce 2c       	mov	r12, r14
 17e:	d1 2c       	mov	r13, r1
 180:	c8 2f       	mov	r28, r24
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	2c 97       	sbiw	r28, 0x0c	; 12
 186:	c8 01       	movw	r24, r16
 188:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 18c:	94 e1       	ldi	r25, 0x14	; 20
 18e:	9c 9d       	mul	r25, r12
 190:	90 01       	movw	r18, r0
 192:	9d 9d       	mul	r25, r13
 194:	30 0d       	add	r19, r0
 196:	11 24       	eor	r1, r1
 198:	23 56       	subi	r18, 0x63	; 99
 19a:	3c 4f       	sbci	r19, 0xFC	; 252
 19c:	c2 0f       	add	r28, r18
 19e:	d3 1f       	adc	r29, r19
 1a0:	8c 87       	std	Y+12, r24	; 0x0c
 1a2:	1f c0       	rjmp	.+62     	; 0x1e2 <InicializaStruct+0xf4>
					}
					else if( contDados % QUANTIDADE_DADOS < 19 ) // Se contDados menor que 19, lê se é ADM
 1a4:	83 31       	cpi	r24, 0x13	; 19
 1a6:	78 f4       	brcc	.+30     	; 0x1c6 <InicializaStruct+0xd8>
					{
						CadastroUsuarios[contCadastros].ADM = EepromRead( contDados );
 1a8:	ce 2d       	mov	r28, r14
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 1b2:	94 e1       	ldi	r25, 0x14	; 20
 1b4:	9c 9f       	mul	r25, r28
 1b6:	f0 01       	movw	r30, r0
 1b8:	9d 9f       	mul	r25, r29
 1ba:	f0 0d       	add	r31, r0
 1bc:	11 24       	eor	r1, r1
 1be:	e3 56       	subi	r30, 0x63	; 99
 1c0:	fc 4f       	sbci	r31, 0xFC	; 252
 1c2:	82 8b       	std	Z+18, r24	; 0x12
 1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <InicializaStruct+0xf4>
					}
					else   // Senão, armazena o uúltimo byte para a porta acionada
					{
						CadastroUsuarios[contCadastros].porta = EepromRead( contDados );
 1c6:	ce 2d       	mov	r28, r14
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	c8 01       	movw	r24, r16
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 1d0:	94 e1       	ldi	r25, 0x14	; 20
 1d2:	9c 9f       	mul	r25, r28
 1d4:	f0 01       	movw	r30, r0
 1d6:	9d 9f       	mul	r25, r29
 1d8:	f0 0d       	add	r31, r0
 1da:	11 24       	eor	r1, r1
 1dc:	e3 56       	subi	r30, 0x63	; 99
 1de:	fc 4f       	sbci	r31, 0xFC	; 252
 1e0:	83 8b       	std	Z+19, r24	; 0x13
	{
		for( unsigned char contCadastros = 0; contCadastros < QUANTIDADE_CADASTROS; contCadastros++ )// Loop para todos os cadastros
		{	
			for( contDados = g_contDadosMemoria * QUANTIDADE_DADOS; 
				 contDados < QUANTIDADE_DADOS * (g_contDadosMemoria + 1);
				 contDados++ )// Loop para os dados cadastrados	
 1e2:	f3 94       	inc	r15
	if( EepromRead(0x00) != 0xFF )  // Se EepromRead(0x00) diferente a 0xFF
	{
		for( unsigned char contCadastros = 0; contCadastros < QUANTIDADE_CADASTROS; contCadastros++ )// Loop para todos os cadastros
		{	
			for( contDados = g_contDadosMemoria * QUANTIDADE_DADOS; 
				 contDados < QUANTIDADE_DADOS * (g_contDadosMemoria + 1);
 1e4:	2f 2d       	mov	r18, r15
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_contDadosMemoria>
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	64 e1       	ldi	r22, 0x14	; 20
 1f2:	68 9f       	mul	r22, r24
 1f4:	a0 01       	movw	r20, r0
 1f6:	69 9f       	mul	r22, r25
 1f8:	50 0d       	add	r21, r0
 1fa:	11 24       	eor	r1, r1
	unsigned char contDados, flagFim = 0;
	if( EepromRead(0x00) != 0xFF )  // Se EepromRead(0x00) diferente a 0xFF
	{
		for( unsigned char contCadastros = 0; contCadastros < QUANTIDADE_CADASTROS; contCadastros++ )// Loop para todos os cadastros
		{	
			for( contDados = g_contDadosMemoria * QUANTIDADE_DADOS; 
 1fc:	c9 01       	movw	r24, r18
 1fe:	84 17       	cp	r24, r20
 200:	95 07       	cpc	r25, r21
 202:	0c f4       	brge	.+2      	; 0x206 <InicializaStruct+0x118>
 204:	8e cf       	rjmp	.-228    	; 0x122 <InicializaStruct+0x34>
 206:	02 c0       	rjmp	.+4      	; 0x20c <InicializaStruct+0x11e>
				 contDados < QUANTIDADE_DADOS * (g_contDadosMemoria + 1);
				 contDados++ )// Loop para os dados cadastrados	
			{
				if( EepromRead( contDados ) == 0xFF )	// Se EepromRead(dadosCadastrados) igual a 0xFF
				{
					flagFim = 1;
 208:	bb 24       	eor	r11, r11
 20a:	b3 94       	inc	r11
					{
						CadastroUsuarios[contCadastros].porta = EepromRead( contDados );
					}
				}
			}
			if(flagFim)	// Se identificou uma área da memória que não está salva
 20c:	b1 10       	cpse	r11, r1
 20e:	0d c0       	rjmp	.+26     	; 0x22a <InicializaStruct+0x13c>
			{
				break;	// Sai do loop
			}
			g_contDadosMemoria++;	// Incrementa contador de dados global
 210:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_contDadosMemoria>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <g_contDadosMemoria>
void InicializaStruct( void )	
{
	unsigned char contDados, flagFim = 0;
	if( EepromRead(0x00) != 0xFF )  // Se EepromRead(0x00) diferente a 0xFF
	{
		for( unsigned char contCadastros = 0; contCadastros < QUANTIDADE_CADASTROS; contCadastros++ )// Loop para todos os cadastros
 21a:	e3 94       	inc	r14
 21c:	02 c0       	rjmp	.+4      	; 0x222 <InicializaStruct+0x134>
 21e:	e1 2c       	mov	r14, r1
 220:	b1 2c       	mov	r11, r1
 222:	8d e1       	ldi	r24, 0x1D	; 29
 224:	8e 15       	cp	r24, r14
 226:	08 f0       	brcs	.+2      	; 0x22a <InicializaStruct+0x13c>
 228:	73 cf       	rjmp	.-282    	; 0x110 <InicializaStruct+0x22>
				break;	// Sai do loop
			}
			g_contDadosMemoria++;	// Incrementa contador de dados global
		}	
	}	
	for( int i = ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS); i < ENDERECO_EVENTOS + ((g_contDadosEeprom + 1) * QUANTIDADE_DADOS_EVENTOS); i = i + QUANTIDADE_DADOS_EVENTOS)
 22a:	c0 91 97 03 	lds	r28, 0x0397	; 0x800397 <g_contDadosEeprom>
 22e:	8d e0       	ldi	r24, 0x0D	; 13
 230:	c8 9f       	mul	r28, r24
 232:	e0 01       	movw	r28, r0
 234:	11 24       	eor	r1, r1
 236:	c8 5a       	subi	r28, 0xA8	; 168
 238:	dd 4f       	sbci	r29, 0xFD	; 253
 23a:	0b c0       	rjmp	.+22     	; 0x252 <InicializaStruct+0x164>
	{
		if( EepromRead( i ) == 0xFF )	// Se EepromRead(dadosCadastrados) igual a 0xFF
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 242:	8f 3f       	cpi	r24, 0xFF	; 255
 244:	b1 f0       	breq	.+44     	; 0x272 <InicializaStruct+0x184>
		{
			break;// break;
		}
		g_contDadosEeprom++;
 246:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <g_contDadosEeprom>
				break;	// Sai do loop
			}
			g_contDadosMemoria++;	// Incrementa contador de dados global
		}	
	}	
	for( int i = ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS); i < ENDERECO_EVENTOS + ((g_contDadosEeprom + 1) * QUANTIDADE_DADOS_EVENTOS); i = i + QUANTIDADE_DADOS_EVENTOS)
 250:	2d 96       	adiw	r28, 0x0d	; 13
 252:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	4d e0       	ldi	r20, 0x0D	; 13
 25c:	48 9f       	mul	r20, r24
 25e:	90 01       	movw	r18, r0
 260:	49 9f       	mul	r20, r25
 262:	30 0d       	add	r19, r0
 264:	11 24       	eor	r1, r1
 266:	c9 01       	movw	r24, r18
 268:	88 5a       	subi	r24, 0xA8	; 168
 26a:	9d 4f       	sbci	r25, 0xFD	; 253
 26c:	c8 17       	cp	r28, r24
 26e:	d9 07       	cpc	r29, r25
 270:	2c f3       	brlt	.-54     	; 0x23c <InicializaStruct+0x14e>
		{
			break;// break;
		}
		g_contDadosEeprom++;
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	bf 90       	pop	r11
 284:	08 95       	ret

00000286 <CadastroUsuario>:
	}
	PULA_LINHA;
}

void CadastroUsuario( void )
{
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	unsigned char contTexto = 0, flagEnter = 0;
	static unsigned int enderecoEeprom = 0;
	recebeuDado = 0;
 28e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
	enderecoEeprom = g_contDadosMemoria;
 292:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <g_contDadosMemoria>
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__data_end+0x1>
 29c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__data_end>
	EscritaTexto("Menu de Cadastro do Usuario\r", sizeof("Menu de Cadastro do Usuario\r"));	// Escreve "Menu de Cadastro do Usuário"
 2a0:	6d e1       	ldi	r22, 0x1D	; 29
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("Digite o nome do usuario (maximo 12 caracteres): \r", sizeof("Digite o nome do usuario (maximo 12 caracteres): \r"));	// Escreve "Digite o nome do usuario (maximo 12 caracteres):
 2aa:	63 e3       	ldi	r22, 0x33	; 51
 2ac:	8d e1       	ldi	r24, 0x1D	; 29
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	PULA_LINHA;
}

void CadastroUsuario( void )
{
	unsigned char contTexto = 0, flagEnter = 0;
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
	static unsigned int enderecoEeprom = 0;
	recebeuDado = 0;
	enderecoEeprom = g_contDadosMemoria;
	EscritaTexto("Menu de Cadastro do Usuario\r", sizeof("Menu de Cadastro do Usuario\r"));	// Escreve "Menu de Cadastro do Usuário"
	EscritaTexto("Digite o nome do usuario (maximo 12 caracteres): \r", sizeof("Digite o nome do usuario (maximo 12 caracteres): \r"));	// Escreve "Digite o nome do usuario (maximo 12 caracteres):
	while( flagEnter != 1 )
 2b8:	3e c0       	rjmp	.+124    	; 0x336 <CadastroUsuario+0xb0>
	{
		do   // Faça enquanto o número definido não está entre 0 e 9
		{
			if( recebeuDado != 0 )	// Se há algo na serial
 2ba:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 2be:	88 23       	and	r24, r24
 2c0:	89 f1       	breq	.+98     	; 0x324 <CadastroUsuario+0x9e>
			{
				EscritaTexto(&(recebeuDado),1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8c e9       	ldi	r24, 0x9C	; 156
 2c6:	93 e0       	ldi	r25, 0x03	; 3
 2c8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				if( recebeuDado >= '0' && recebeuDado <= '9' )	// Se o valor está fora de 1 a 5
 2cc:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 2d0:	90 ed       	ldi	r25, 0xD0	; 208
 2d2:	98 0f       	add	r25, r24
 2d4:	9a 30       	cpi	r25, 0x0A	; 10
 2d6:	40 f4       	brcc	.+16     	; 0x2e8 <CadastroUsuario+0x62>
				{
					EscritaTexto("Digite apenas letras\r", sizeof("Digite apenas letras\r"));
 2d8:	66 e1       	ldi	r22, 0x16	; 22
 2da:	80 e5       	ldi	r24, 0x50	; 80
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
					recebeuDado = 0;
 2e2:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
 2e6:	1e c0       	rjmp	.+60     	; 0x324 <CadastroUsuario+0x9e>
				}
				else if( recebeuDado != 0 )	// Se há caracter a ser lido
 2e8:	88 23       	and	r24, r24
 2ea:	e1 f0       	breq	.+56     	; 0x324 <CadastroUsuario+0x9e>
				{
					if( recebeuDado == 0x08 ) // Se backspace
 2ec:	88 30       	cpi	r24, 0x08	; 8
 2ee:	21 f4       	brne	.+8      	; 0x2f8 <CadastroUsuario+0x72>
					{
						if( contTexto > 0 )	// Impede que seja menor que 0
 2f0:	cc 23       	and	r28, r28
 2f2:	a1 f0       	breq	.+40     	; 0x31c <CadastroUsuario+0x96>
						{	
							contTexto--;	// Decrementa contTexto
 2f4:	c1 50       	subi	r28, 0x01	; 1
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <CadastroUsuario+0x96>
							contTexto = 0;	// contTexto recebe 0
						}
					}
					else
					{
						CadastroUsuarios[enderecoEeprom].nome[contTexto] = recebeuDado;
 2f8:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
 2fc:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__data_end+0x1>
 300:	94 e1       	ldi	r25, 0x14	; 20
 302:	92 9f       	mul	r25, r18
 304:	f0 01       	movw	r30, r0
 306:	93 9f       	mul	r25, r19
 308:	f0 0d       	add	r31, r0
 30a:	11 24       	eor	r1, r1
 30c:	e3 56       	subi	r30, 0x63	; 99
 30e:	fc 4f       	sbci	r31, 0xFC	; 252
 310:	ec 0f       	add	r30, r28
 312:	f1 1d       	adc	r31, r1
 314:	80 83       	st	Z, r24
						contTexto++;
 316:	cf 5f       	subi	r28, 0xFF	; 255
						if( recebeuDado == '\r')	// Se chegou ao final do texto
 318:	8d 30       	cpi	r24, 0x0D	; 13
 31a:	51 f0       	breq	.+20     	; 0x330 <CadastroUsuario+0xaa>
							flagEnter = 1;	// Termina a leitura
							break;
						}
					}
					
					recebeuDado = 0;
 31c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
					if( contTexto == 12 )	// Chegou ao final do número de caracteres
 320:	cc 30       	cpi	r28, 0x0C	; 12
 322:	41 f0       	breq	.+16     	; 0x334 <CadastroUsuario+0xae>
					}
					
				}
			}

		}while( recebeuDado >= '0' && recebeuDado <= '9' );
 324:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 328:	80 53       	subi	r24, 0x30	; 48
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	30 f2       	brcs	.-116    	; 0x2ba <CadastroUsuario+0x34>
 32e:	03 c0       	rjmp	.+6      	; 0x336 <CadastroUsuario+0xb0>
					{
						CadastroUsuarios[enderecoEeprom].nome[contTexto] = recebeuDado;
						contTexto++;
						if( recebeuDado == '\r')	// Se chegou ao final do texto
						{
							flagEnter = 1;	// Termina a leitura
 330:	11 e0       	ldi	r17, 0x01	; 1
 332:	01 c0       	rjmp	.+2      	; 0x336 <CadastroUsuario+0xb0>
					}
					
					recebeuDado = 0;
					if( contTexto == 12 )	// Chegou ao final do número de caracteres
					{
						flagEnter = 1;	// Termina a leitura
 334:	11 e0       	ldi	r17, 0x01	; 1
	static unsigned int enderecoEeprom = 0;
	recebeuDado = 0;
	enderecoEeprom = g_contDadosMemoria;
	EscritaTexto("Menu de Cadastro do Usuario\r", sizeof("Menu de Cadastro do Usuario\r"));	// Escreve "Menu de Cadastro do Usuário"
	EscritaTexto("Digite o nome do usuario (maximo 12 caracteres): \r", sizeof("Digite o nome do usuario (maximo 12 caracteres): \r"));	// Escreve "Digite o nome do usuario (maximo 12 caracteres):
	while( flagEnter != 1 )
 336:	11 30       	cpi	r17, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <CadastroUsuario+0xb6>
 33a:	bf cf       	rjmp	.-130    	; 0x2ba <CadastroUsuario+0x34>
				}
			}

		}while( recebeuDado >= '0' && recebeuDado <= '9' );
	}
	EscritaTexto("Nome cadastrado\r", sizeof("Nome cadastrado\r"));	// Escreve "Nome cadastrado"
 33c:	61 e1       	ldi	r22, 0x11	; 17
 33e:	86 e6       	ldi	r24, 0x66	; 102
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("Entre com a senha (apenas 6 numeros): \r", sizeof("Entre com a senha (apenas 6 numeros): \r"));		// Escreve "Entre com a senha (apenas numeros): "
 346:	68 e2       	ldi	r22, 0x28	; 40
 348:	87 e7       	ldi	r24, 0x77	; 119
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	flagEnter = 0;
	contTexto = 0;
	recebeuDado = 0;
 350:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>

		}while( recebeuDado >= '0' && recebeuDado <= '9' );
	}
	EscritaTexto("Nome cadastrado\r", sizeof("Nome cadastrado\r"));	// Escreve "Nome cadastrado"
	EscritaTexto("Entre com a senha (apenas 6 numeros): \r", sizeof("Entre com a senha (apenas 6 numeros): \r"));		// Escreve "Entre com a senha (apenas numeros): "
	flagEnter = 0;
 354:	00 e0       	ldi	r16, 0x00	; 0
	contTexto = 0;
 356:	d0 e0       	ldi	r29, 0x00	; 0
	recebeuDado = 0;
	while( flagEnter != 1 )	
 358:	52 c0       	rjmp	.+164    	; 0x3fe <CadastroUsuario+0x178>
	{
		do   // Faça enquanto o número definido não está entre 0 e 9
		{
			if( recebeuDado != 0 )	// Se há algo na serial
 35a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 35e:	88 23       	and	r24, r24
 360:	09 f4       	brne	.+2      	; 0x364 <CadastroUsuario+0xde>
 362:	45 c0       	rjmp	.+138    	; 0x3ee <CadastroUsuario+0x168>
			{
				EscritaTexto(&(recebeuDado),1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	8c e9       	ldi	r24, 0x9C	; 156
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
 36e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 372:	90 ed       	ldi	r25, 0xD0	; 208
 374:	98 0f       	add	r25, r24
 376:	9a 30       	cpi	r25, 0x0A	; 10
 378:	f0 f0       	brcs	.+60     	; 0x3b6 <CadastroUsuario+0x130>
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
 37a:	67 e1       	ldi	r22, 0x17	; 23
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
					for(char i = 0; i < contTexto; i++ )
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	12 c0       	rjmp	.+36     	; 0x3ac <CadastroUsuario+0x126>
					{
						EscritaTexto(&(CadastroUsuarios[enderecoEeprom].senha[i]), 1);	
 388:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
 38c:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__data_end+0x1>
 390:	44 e1       	ldi	r20, 0x14	; 20
 392:	42 9f       	mul	r20, r18
 394:	c0 01       	movw	r24, r0
 396:	43 9f       	mul	r20, r19
 398:	90 0d       	add	r25, r0
 39a:	11 24       	eor	r1, r1
 39c:	8c 0f       	add	r24, r28
 39e:	91 1d       	adc	r25, r1
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	87 55       	subi	r24, 0x57	; 87
 3a4:	9c 4f       	sbci	r25, 0xFC	; 252
 3a6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
			{
				EscritaTexto(&(recebeuDado),1);
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
					for(char i = 0; i < contTexto; i++ )
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
 3ac:	cd 17       	cp	r28, r29
 3ae:	60 f3       	brcs	.-40     	; 0x388 <CadastroUsuario+0x102>
					{
						EscritaTexto(&(CadastroUsuarios[enderecoEeprom].senha[i]), 1);	
					}
			
					recebeuDado = 0;
 3b0:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
 3b4:	1c c0       	rjmp	.+56     	; 0x3ee <CadastroUsuario+0x168>
				}
				else if( recebeuDado != 0 )	// Se há caracter a ser lido
 3b6:	88 23       	and	r24, r24
 3b8:	d1 f0       	breq	.+52     	; 0x3ee <CadastroUsuario+0x168>
				{
					if( recebeuDado == 0x08 ) // Se backspace
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <CadastroUsuario+0x140>
					{
						if( contTexto > 0 )	// Impede que seja menor que 0
 3be:	dd 23       	and	r29, r29
 3c0:	91 f0       	breq	.+36     	; 0x3e6 <CadastroUsuario+0x160>
						{
							contTexto--;	// Decrementa contTexto
 3c2:	d1 50       	subi	r29, 0x01	; 1
 3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <CadastroUsuario+0x160>
						}
					}
					else
					{
						
						CadastroUsuarios[enderecoEeprom].senha[contTexto] = recebeuDado;
 3c6:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
 3ca:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__data_end+0x1>
 3ce:	94 e1       	ldi	r25, 0x14	; 20
 3d0:	92 9f       	mul	r25, r18
 3d2:	f0 01       	movw	r30, r0
 3d4:	93 9f       	mul	r25, r19
 3d6:	f0 0d       	add	r31, r0
 3d8:	11 24       	eor	r1, r1
 3da:	e3 56       	subi	r30, 0x63	; 99
 3dc:	fc 4f       	sbci	r31, 0xFC	; 252
 3de:	ed 0f       	add	r30, r29
 3e0:	f1 1d       	adc	r31, r1
 3e2:	84 87       	std	Z+12, r24	; 0x0c
						contTexto++;
 3e4:	df 5f       	subi	r29, 0xFF	; 255
					}
					
					recebeuDado = 0;
 3e6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
 3ea:	d6 30       	cpi	r29, 0x06	; 6
 3ec:	39 f0       	breq	.+14     	; 0x3fc <CadastroUsuario+0x176>
					}
					
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
 3ee:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 3f2:	80 53       	subi	r24, 0x30	; 48
 3f4:	8a 30       	cpi	r24, 0x0A	; 10
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <CadastroUsuario+0x174>
 3f8:	b0 cf       	rjmp	.-160    	; 0x35a <CadastroUsuario+0xd4>
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <CadastroUsuario+0x178>
					}
					
					recebeuDado = 0;
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
					{
						flagEnter = 1;
 3fc:	01 2f       	mov	r16, r17
	EscritaTexto("Nome cadastrado\r", sizeof("Nome cadastrado\r"));	// Escreve "Nome cadastrado"
	EscritaTexto("Entre com a senha (apenas 6 numeros): \r", sizeof("Entre com a senha (apenas 6 numeros): \r"));		// Escreve "Entre com a senha (apenas numeros): "
	flagEnter = 0;
	contTexto = 0;
	recebeuDado = 0;
	while( flagEnter != 1 )	
 3fe:	01 30       	cpi	r16, 0x01	; 1
 400:	09 f0       	breq	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	ab cf       	rjmp	.-170    	; 0x35a <CadastroUsuario+0xd4>
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}	
	PULA_LINHA;
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	8e e4       	ldi	r24, 0x4E	; 78
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("Senha cadastrada\r", sizeof("Senha cadastrada\r"));
 40e:	62 e1       	ldi	r22, 0x12	; 18
 410:	86 eb       	ldi	r24, 0xB6	; 182
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("Entre com 1 para ADM e 0 para Comum: \r", sizeof("Entre com 1 para ADM e 0 para Comum: \r"));
 418:	67 e2       	ldi	r22, 0x27	; 39
 41a:	88 ec       	ldi	r24, 0xC8	; 200
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	flagEnter = 0;
	recebeuDado = 0;
 422:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}	
	PULA_LINHA;
	EscritaTexto("Senha cadastrada\r", sizeof("Senha cadastrada\r"));
	EscritaTexto("Entre com 1 para ADM e 0 para Comum: \r", sizeof("Entre com 1 para ADM e 0 para Comum: \r"));
	flagEnter = 0;
 426:	c0 e0       	ldi	r28, 0x00	; 0
	recebeuDado = 0;
	while( flagEnter != 1 )
 428:	35 c0       	rjmp	.+106    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	{
		do   // Faça enquanto o número definido não está entre 0 e 9
		{
			if( recebeuDado != 0 )	// Se há algo na serial
 42a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 42e:	88 23       	and	r24, r24
 430:	61 f1       	breq	.+88     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			{
				EscritaTexto(&(recebeuDado),1);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	8c e9       	ldi	r24, 0x9C	; 156
 436:	93 e0       	ldi	r25, 0x03	; 3
 438:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				if( recebeuDado < '0' || recebeuDado > '1' )	// Se o valor está fora de 0 a 9
 43c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 440:	90 ed       	ldi	r25, 0xD0	; 208
 442:	98 0f       	add	r25, r24
 444:	92 30       	cpi	r25, 0x02	; 2
 446:	40 f0       	brcs	.+16     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				{
					EscritaTexto("Digite 0 ou 1\r", sizeof("Digite 0 ou 1\r"));
 448:	6f e0       	ldi	r22, 0x0F	; 15
 44a:	8f ee       	ldi	r24, 0xEF	; 239
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
					recebeuDado = 0;
 452:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
 456:	19 c0       	rjmp	.+50     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
				}
				else if( recebeuDado != 0 )	// Se há caracter a ser lido
 458:	88 23       	and	r24, r24
 45a:	b9 f0       	breq	.+46     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
				{
					if( recebeuDado == 0x08 ) // Se backspace
 45c:	88 30       	cpi	r24, 0x08	; 8
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
					{
						if( contTexto > 0 )	// Impede que seja menor que 0
 460:	dd 23       	and	r29, r29
 462:	89 f0       	breq	.+34     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
						{
							contTexto--;	// Decrementa contTexto
 464:	d1 50       	subi	r29, 0x01	; 1
 466:	0f c0       	rjmp	.+30     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
							contTexto = 0;	// contTexto recebe 0
						}
					}
					else
					{
						CadastroUsuarios[enderecoEeprom].ADM = recebeuDado;
 468:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <__data_end>
 46c:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <__data_end+0x1>
 470:	94 e1       	ldi	r25, 0x14	; 20
 472:	92 9f       	mul	r25, r18
 474:	f0 01       	movw	r30, r0
 476:	93 9f       	mul	r25, r19
 478:	f0 0d       	add	r31, r0
 47a:	11 24       	eor	r1, r1
 47c:	e3 56       	subi	r30, 0x63	; 99
 47e:	fc 4f       	sbci	r31, 0xFC	; 252
 480:	82 8b       	std	Z+18, r24	; 0x12
						flagEnter = 1;
 482:	c0 2f       	mov	r28, r16
						break;
 484:	07 c0       	rjmp	.+14     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
					}
					recebeuDado = 0;
 486:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '1' ); // Faça enquanto o caracter é diferente de número
 48a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 48e:	80 53       	subi	r24, 0x30	; 48
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	58 f6       	brcc	.-106    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	PULA_LINHA;
	EscritaTexto("Senha cadastrada\r", sizeof("Senha cadastrada\r"));
	EscritaTexto("Entre com 1 para ADM e 0 para Comum: \r", sizeof("Entre com 1 para ADM e 0 para Comum: \r"));
	flagEnter = 0;
	recebeuDado = 0;
	while( flagEnter != 1 )
 494:	c1 30       	cpi	r28, 0x01	; 1
 496:	49 f6       	brne	.-110    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '1' ); // Faça enquanto o caracter é diferente de número
	}
	recebeuDado = 0;
 498:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
	PULA_LINHA;
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	8e e4       	ldi	r24, 0x4E	; 78
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	char leMemoria = 0;
	for( unsigned  int i = enderecoEeprom * (QUANTIDADE_DADOS); i < (QUANTIDADE_DADOS)*(enderecoEeprom + 1); i++ )
 4a6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
 4aa:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
 4ae:	24 e1       	ldi	r18, 0x14	; 20
 4b0:	28 9f       	mul	r18, r24
 4b2:	e0 01       	movw	r28, r0
 4b4:	29 9f       	mul	r18, r25
 4b6:	d0 0d       	add	r29, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	56 c0       	rjmp	.+172    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
	{
		if( i % (QUANTIDADE_DADOS) < 12 )	// Se o valor menor que 12
 4bc:	9e 01       	movw	r18, r28
 4be:	ad ec       	ldi	r26, 0xCD	; 205
 4c0:	bc ec       	ldi	r27, 0xCC	; 204
 4c2:	0e 94 98 06 	call	0xd30	; 0xd30 <__umulhisi3>
 4c6:	92 95       	swap	r25
 4c8:	82 95       	swap	r24
 4ca:	8f 70       	andi	r24, 0x0F	; 15
 4cc:	89 27       	eor	r24, r25
 4ce:	9f 70       	andi	r25, 0x0F	; 15
 4d0:	89 27       	eor	r24, r25
 4d2:	64 e1       	ldi	r22, 0x14	; 20
 4d4:	68 9f       	mul	r22, r24
 4d6:	90 01       	movw	r18, r0
 4d8:	69 9f       	mul	r22, r25
 4da:	30 0d       	add	r19, r0
 4dc:	11 24       	eor	r1, r1
 4de:	ce 01       	movw	r24, r28
 4e0:	82 1b       	sub	r24, r18
 4e2:	93 0b       	sbc	r25, r19
 4e4:	8c 30       	cpi	r24, 0x0C	; 12
 4e6:	91 05       	cpc	r25, r1
 4e8:	78 f4       	brcc	.+30     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
		{
			EepromWrite(i ,CadastroUsuarios[enderecoEeprom].nome[ i % (QUANTIDADE_DADOS) ]);	// Armazena os dados 
 4ea:	64 9f       	mul	r22, r20
 4ec:	90 01       	movw	r18, r0
 4ee:	65 9f       	mul	r22, r21
 4f0:	30 0d       	add	r19, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	23 56       	subi	r18, 0x63	; 99
 4f6:	3c 4f       	sbci	r19, 0xFC	; 252
 4f8:	f9 01       	movw	r30, r18
 4fa:	e8 0f       	add	r30, r24
 4fc:	f9 1f       	adc	r31, r25
 4fe:	60 81       	ld	r22, Z
 500:	ce 01       	movw	r24, r28
 502:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
 506:	2f c0       	rjmp	.+94     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		}
		else if( i % (QUANTIDADE_DADOS) < 18 )	// Senão se valor menor que 18
 508:	82 31       	cpi	r24, 0x12	; 18
 50a:	91 05       	cpc	r25, r1
 50c:	80 f4       	brcc	.+32     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
		{
			EepromWrite(i,CadastroUsuarios[enderecoEeprom].senha[ i % (QUANTIDADE_DADOS) - 12 ]);	// Armazena a senha
 50e:	0c 97       	sbiw	r24, 0x0c	; 12
 510:	24 e1       	ldi	r18, 0x14	; 20
 512:	24 9f       	mul	r18, r20
 514:	f0 01       	movw	r30, r0
 516:	25 9f       	mul	r18, r21
 518:	f0 0d       	add	r31, r0
 51a:	11 24       	eor	r1, r1
 51c:	e3 56       	subi	r30, 0x63	; 99
 51e:	fc 4f       	sbci	r31, 0xFC	; 252
 520:	e8 0f       	add	r30, r24
 522:	f9 1f       	adc	r31, r25
 524:	64 85       	ldd	r22, Z+12	; 0x0c
 526:	ce 01       	movw	r24, r28
 528:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
 52c:	1c c0       	rjmp	.+56     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		}
		else if( i % (QUANTIDADE_DADOS) < 19 )    // Senão
 52e:	43 97       	sbiw	r24, 0x13	; 19
 530:	68 f4       	brcc	.+26     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
		{
			EepromWrite(i,CadastroUsuarios[enderecoEeprom].ADM);	// Armazena se é ADM ou não
 532:	84 e1       	ldi	r24, 0x14	; 20
 534:	84 9f       	mul	r24, r20
 536:	f0 01       	movw	r30, r0
 538:	85 9f       	mul	r24, r21
 53a:	f0 0d       	add	r31, r0
 53c:	11 24       	eor	r1, r1
 53e:	e3 56       	subi	r30, 0x63	; 99
 540:	fc 4f       	sbci	r31, 0xFC	; 252
 542:	62 89       	ldd	r22, Z+18	; 0x12
 544:	ce 01       	movw	r24, r28
 546:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
 54a:	0d c0       	rjmp	.+26     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
		}
		else    // Senão
		{
			EepromWrite(i,CadastroUsuarios[enderecoEeprom].porta + 0x30);	// Armazena se é ADM ou não
 54c:	84 e1       	ldi	r24, 0x14	; 20
 54e:	84 9f       	mul	r24, r20
 550:	f0 01       	movw	r30, r0
 552:	85 9f       	mul	r24, r21
 554:	f0 0d       	add	r31, r0
 556:	11 24       	eor	r1, r1
 558:	e3 56       	subi	r30, 0x63	; 99
 55a:	fc 4f       	sbci	r31, 0xFC	; 252
 55c:	63 89       	ldd	r22, Z+19	; 0x13
 55e:	60 5d       	subi	r22, 0xD0	; 208
 560:	ce 01       	movw	r24, r28
 562:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
		}while( recebeuDado < '0' || recebeuDado > '1' ); // Faça enquanto o caracter é diferente de número
	}
	recebeuDado = 0;
	PULA_LINHA;
	char leMemoria = 0;
	for( unsigned  int i = enderecoEeprom * (QUANTIDADE_DADOS); i < (QUANTIDADE_DADOS)*(enderecoEeprom + 1); i++ )
 566:	21 96       	adiw	r28, 0x01	; 1
 568:	40 91 92 03 	lds	r20, 0x0392	; 0x800392 <__data_end>
 56c:	50 91 93 03 	lds	r21, 0x0393	; 0x800393 <__data_end+0x1>
 570:	9a 01       	movw	r18, r20
 572:	2f 5f       	subi	r18, 0xFF	; 255
 574:	3f 4f       	sbci	r19, 0xFF	; 255
 576:	64 e1       	ldi	r22, 0x14	; 20
 578:	62 9f       	mul	r22, r18
 57a:	c0 01       	movw	r24, r0
 57c:	63 9f       	mul	r22, r19
 57e:	90 0d       	add	r25, r0
 580:	11 24       	eor	r1, r1
 582:	c8 17       	cp	r28, r24
 584:	d9 07       	cpc	r29, r25
 586:	08 f4       	brcc	.+2      	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 588:	99 cf       	rjmp	.-206    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		else    // Senão
		{
			EepromWrite(i,CadastroUsuarios[enderecoEeprom].porta + 0x30);	// Armazena se é ADM ou não
		}
	}
	PULA_LINHA;
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	8e e4       	ldi	r24, 0x4E	; 78
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	enderecoEeprom++;	// Incrementa a posição do endereço
 594:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <__data_end>
 598:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <__data_end+0x1>
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__data_end+0x1>
 5a2:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__data_end>
	g_contDadosMemoria = enderecoEeprom;
 5a6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <g_contDadosMemoria>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <ListaUsuario>:

void ListaUsuario( void )
{
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char contUsuario = 0;
	char leMemoria = 0;
 5c2:	19 82       	std	Y+1, r1	; 0x01
	if( EepromRead(0x00) == 0xFF )	// Se o dado na posição 0 é 0xFF
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 5cc:	8f 3f       	cpi	r24, 0xFF	; 255
 5ce:	31 f4       	brne	.+12     	; 0x5dc <ListaUsuario+0x28>
	{
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
 5d0:	61 e2       	ldi	r22, 0x21	; 33
 5d2:	8e ef       	ldi	r24, 0xFE	; 254
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
 5da:	2d c0       	rjmp	.+90     	; 0x636 <ListaUsuario+0x82>
	}
	else	// Senão
	{
		EscritaTexto("Lista de usuarios\r", sizeof("Lista de usuarios\r"));		// Escreve "Lista de usuários\n"
 5dc:	63 e1       	ldi	r22, 0x13	; 19
 5de:	8f e1       	ldi	r24, 0x1F	; 31
 5e0:	92 e0       	ldi	r25, 0x02	; 2
 5e2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
}

void ListaUsuario( void )
{
	
	unsigned char contUsuario = 0;
 5e6:	00 e0       	ldi	r16, 0x00	; 0
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
	}
	else	// Senão
	{
		EscritaTexto("Lista de usuarios\r", sizeof("Lista de usuarios\r"));		// Escreve "Lista de usuários\n"
		while( leMemoria != 0xFF )
 5e8:	1e c0       	rjmp	.+60     	; 0x626 <ListaUsuario+0x72>
		{	
			for( char i = 0; i < 12; i++ )	// Para i começando de 0, i < 12, i incrementa de 1. 12 é o número de caracteres para o nome
			{
				leMemoria = EepromRead(contUsuario * (QUANTIDADE_DADOS) + i);	// leMemoria recebe o endereço conUsuario * Quantidade_dados + i
 5ea:	81 2f       	mov	r24, r17
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	24 e1       	ldi	r18, 0x14	; 20
 5f0:	02 9f       	mul	r16, r18
 5f2:	80 0d       	add	r24, r0
 5f4:	91 1d       	adc	r25, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 5fc:	89 83       	std	Y+1, r24	; 0x01
				if( leMemoria == 0xFF || leMemoria == '\r' )	// Se leMemoria igual 0xFF
 5fe:	8f 3f       	cpi	r24, 0xFF	; 255
 600:	61 f0       	breq	.+24     	; 0x61a <ListaUsuario+0x66>
 602:	8d 30       	cpi	r24, 0x0D	; 13
 604:	51 f0       	breq	.+20     	; 0x61a <ListaUsuario+0x66>
				{
					break;	// Break;	
				}
				else    // Senão
				{
					EscritaTexto(&(leMemoria),1);	// Escreve a letra	
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	else	// Senão
	{
		EscritaTexto("Lista de usuarios\r", sizeof("Lista de usuarios\r"));		// Escreve "Lista de usuários\n"
		while( leMemoria != 0xFF )
		{	
			for( char i = 0; i < 12; i++ )	// Para i começando de 0, i < 12, i incrementa de 1. 12 é o número de caracteres para o nome
 610:	1f 5f       	subi	r17, 0xFF	; 255
 612:	01 c0       	rjmp	.+2      	; 0x616 <ListaUsuario+0x62>
 614:	10 e0       	ldi	r17, 0x00	; 0
 616:	1c 30       	cpi	r17, 0x0C	; 12
 618:	40 f3       	brcs	.-48     	; 0x5ea <ListaUsuario+0x36>
				else    // Senão
				{
					EscritaTexto(&(leMemoria),1);	// Escreve a letra	
				}
			}
			contUsuario++;	// Incrementa contUsuario;
 61a:	0f 5f       	subi	r16, 0xFF	; 255
			PULA_LINHA;	// Pula linha	
 61c:	62 e0       	ldi	r22, 0x02	; 2
 61e:	8e e4       	ldi	r24, 0x4E	; 78
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
	}
	else	// Senão
	{
		EscritaTexto("Lista de usuarios\r", sizeof("Lista de usuarios\r"));		// Escreve "Lista de usuários\n"
		while( leMemoria != 0xFF )
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	8f 3f       	cpi	r24, 0xFF	; 255
 62a:	a1 f7       	brne	.-24     	; 0x614 <ListaUsuario+0x60>
				}
			}
			contUsuario++;	// Incrementa contUsuario;
			PULA_LINHA;	// Pula linha	
		}
		PULA_LINHA;	// Pula linha
 62c:	62 e0       	ldi	r22, 0x02	; 2
 62e:	8e e4       	ldi	r24, 0x4E	; 78
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	}
}
 636:	0f 90       	pop	r0
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	08 95       	ret

00000642 <ListaEventos>:

void ListaEventos( void )
{
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
 652:	27 97       	sbiw	r28, 0x07	; 7
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	de bf       	out	0x3e, r29	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	cd bf       	out	0x3d, r28	; 61
	char contTexto = 0, senha[6], flagEnter = 0;
	recebeuDado = 0;
 65e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
	if( EepromRead(ENDERECO_EVENTOS) == 0xFF )	// Se o dado na posição 0 é 0xFF
 662:	88 e5       	ldi	r24, 0x58	; 88
 664:	92 e0       	ldi	r25, 0x02	; 2
 666:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 66a:	8f 3f       	cpi	r24, 0xFF	; 255
 66c:	31 f4       	brne	.+12     	; 0x67a <ListaEventos+0x38>
	{
		EscritaTexto("Nao ha eventos cadastrados\r", sizeof("Nao ha eventos cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
 66e:	6c e1       	ldi	r22, 0x1C	; 28
 670:	82 e3       	ldi	r24, 0x32	; 50
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
 678:	f0 c0       	rjmp	.+480    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
 67a:	64 e2       	ldi	r22, 0x24	; 36
 67c:	8e e4       	ldi	r24, 0x4E	; 78
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	}
}

void ListaEventos( void )
{
	char contTexto = 0, senha[6], flagEnter = 0;
 684:	f1 2c       	mov	r15, r1
 686:	00 e0       	ldi	r16, 0x00	; 0
	{
		EscritaTexto("Nao ha eventos cadastrados\r", sizeof("Nao ha eventos cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
	while( flagEnter != 1 )
 688:	41 c0       	rjmp	.+130    	; 0x70c <ListaEventos+0xca>
	{
		do   // Faça enquanto o número definido não está entre 0 e 9
		{
			if( recebeuDado != 0 )	// Se há algo na serial
 68a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 68e:	88 23       	and	r24, r24
 690:	a9 f1       	breq	.+106    	; 0x6fc <ListaEventos+0xba>
			{
				EscritaTexto(&(recebeuDado),1);
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	8c e9       	ldi	r24, 0x9C	; 156
 696:	93 e0       	ldi	r25, 0x03	; 3
 698:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
 69c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 6a0:	90 ed       	ldi	r25, 0xD0	; 208
 6a2:	98 0f       	add	r25, r24
 6a4:	9a 30       	cpi	r25, 0x0A	; 10
 6a6:	b0 f0       	brcs	.+44     	; 0x6d4 <ListaEventos+0x92>
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
 6a8:	67 e1       	ldi	r22, 0x17	; 23
 6aa:	8f e9       	ldi	r24, 0x9F	; 159
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
					for(char i = 0; i < contTexto; i++ )
 6b2:	10 e0       	ldi	r17, 0x00	; 0
 6b4:	0a c0       	rjmp	.+20     	; 0x6ca <ListaEventos+0x88>
					{
						EscritaTexto(&(senha[i]), 1);
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	8c 0f       	add	r24, r28
 6be:	9d 1f       	adc	r25, r29
 6c0:	81 0f       	add	r24, r17
 6c2:	91 1d       	adc	r25, r1
 6c4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
			{
				EscritaTexto(&(recebeuDado),1);
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
					for(char i = 0; i < contTexto; i++ )
 6c8:	1f 5f       	subi	r17, 0xFF	; 255
 6ca:	10 17       	cp	r17, r16
 6cc:	a0 f3       	brcs	.-24     	; 0x6b6 <ListaEventos+0x74>
					{
						EscritaTexto(&(senha[i]), 1);
					}
					
					recebeuDado = 0;
 6ce:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <ListaEventos+0xba>
				}
				else if( recebeuDado != 0 )	// Se há caracter a ser lido
 6d4:	88 23       	and	r24, r24
 6d6:	91 f0       	breq	.+36     	; 0x6fc <ListaEventos+0xba>
				{
					if( recebeuDado == 0x08 ) // Se backspace
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	21 f4       	brne	.+8      	; 0x6e4 <ListaEventos+0xa2>
					{
						if( contTexto > 0 )	// Impede que seja menor que 0
 6dc:	00 23       	and	r16, r16
 6de:	51 f0       	breq	.+20     	; 0x6f4 <ListaEventos+0xb2>
						{
							contTexto--;	// Decrementa contTexto
 6e0:	01 50       	subi	r16, 0x01	; 1
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <ListaEventos+0xb2>
							contTexto = 0;	// contTexto recebe 0
						}
					}
					else
					{
						senha[contTexto] = recebeuDado;
 6e4:	e1 e0       	ldi	r30, 0x01	; 1
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	ec 0f       	add	r30, r28
 6ea:	fd 1f       	adc	r31, r29
 6ec:	e0 0f       	add	r30, r16
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 83       	st	Z, r24
						contTexto++;
 6f2:	0f 5f       	subi	r16, 0xFF	; 255
					}
					
					recebeuDado = 0;
 6f4:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
 6f8:	06 30       	cpi	r16, 0x06	; 6
 6fa:	31 f0       	breq	.+12     	; 0x708 <ListaEventos+0xc6>
					}
					
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
 6fc:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 700:	80 53       	subi	r24, 0x30	; 48
 702:	8a 30       	cpi	r24, 0x0A	; 10
 704:	10 f6       	brcc	.-124    	; 0x68a <ListaEventos+0x48>
 706:	02 c0       	rjmp	.+4      	; 0x70c <ListaEventos+0xca>
					}
					
					recebeuDado = 0;
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
					{
						flagEnter = 1;
 708:	ff 24       	eor	r15, r15
 70a:	f3 94       	inc	r15
	{
		EscritaTexto("Nao ha eventos cadastrados\r", sizeof("Nao ha eventos cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
	while( flagEnter != 1 )
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	f2 12       	cpse	r15, r18
 710:	bc cf       	rjmp	.-136    	; 0x68a <ListaEventos+0x48>
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}
	PULA_LINHA;
 712:	62 e0       	ldi	r22, 0x02	; 2
 714:	8e e4       	ldi	r24, 0x4E	; 78
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0, contDadosEventos = 0;
	char leMemoria = 0;
 71c:	1f 82       	std	Y+7, r1	; 0x07
	int i;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 71e:	10 e0       	ldi	r17, 0x00	; 0
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}
	PULA_LINHA;
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0, contDadosEventos = 0;
 720:	40 e0       	ldi	r20, 0x00	; 0
	char leMemoria = 0;
	int i;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 722:	91 c0       	rjmp	.+290    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	{
		
		if( CadastroUsuarios[contAdm].ADM == '1' )
 724:	81 2f       	mov	r24, r17
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	24 e1       	ldi	r18, 0x14	; 20
 72a:	28 9f       	mul	r18, r24
 72c:	f0 01       	movw	r30, r0
 72e:	29 9f       	mul	r18, r25
 730:	f0 0d       	add	r31, r0
 732:	11 24       	eor	r1, r1
 734:	e3 56       	subi	r30, 0x63	; 99
 736:	fc 4f       	sbci	r31, 0xFC	; 252
 738:	22 89       	ldd	r18, Z+18	; 0x12
 73a:	21 33       	cpi	r18, 0x31	; 49
 73c:	09 f0       	breq	.+2      	; 0x740 <ListaEventos+0xfe>
 73e:	82 c0       	rjmp	.+260    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
 740:	39 81       	ldd	r19, Y+1	; 0x01
 742:	24 e1       	ldi	r18, 0x14	; 20
 744:	28 9f       	mul	r18, r24
 746:	f0 01       	movw	r30, r0
 748:	29 9f       	mul	r18, r25
 74a:	f0 0d       	add	r31, r0
 74c:	11 24       	eor	r1, r1
 74e:	e3 56       	subi	r30, 0x63	; 99
 750:	fc 4f       	sbci	r31, 0xFC	; 252
 752:	24 85       	ldd	r18, Z+12	; 0x0c
 754:	32 13       	cpse	r19, r18
 756:	76 c0       	rjmp	.+236    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
 758:	3a 81       	ldd	r19, Y+2	; 0x02
 75a:	24 e1       	ldi	r18, 0x14	; 20
 75c:	28 9f       	mul	r18, r24
 75e:	f0 01       	movw	r30, r0
 760:	29 9f       	mul	r18, r25
 762:	f0 0d       	add	r31, r0
 764:	11 24       	eor	r1, r1
 766:	e3 56       	subi	r30, 0x63	; 99
 768:	fc 4f       	sbci	r31, 0xFC	; 252
 76a:	25 85       	ldd	r18, Z+13	; 0x0d
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
	{
		
		if( CadastroUsuarios[contAdm].ADM == '1' )
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
 76c:	32 13       	cpse	r19, r18
 76e:	6a c0       	rjmp	.+212    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
				senha[2] == CadastroUsuarios[contAdm].senha[2] &&
 770:	3b 81       	ldd	r19, Y+3	; 0x03
 772:	24 e1       	ldi	r18, 0x14	; 20
 774:	28 9f       	mul	r18, r24
 776:	f0 01       	movw	r30, r0
 778:	29 9f       	mul	r18, r25
 77a:	f0 0d       	add	r31, r0
 77c:	11 24       	eor	r1, r1
 77e:	e3 56       	subi	r30, 0x63	; 99
 780:	fc 4f       	sbci	r31, 0xFC	; 252
 782:	26 85       	ldd	r18, Z+14	; 0x0e
	{
		
		if( CadastroUsuarios[contAdm].ADM == '1' )
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
 784:	32 13       	cpse	r19, r18
 786:	5e c0       	rjmp	.+188    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				senha[2] == CadastroUsuarios[contAdm].senha[2] &&
				senha[3] == CadastroUsuarios[contAdm].senha[3] &&
 788:	3c 81       	ldd	r19, Y+4	; 0x04
 78a:	24 e1       	ldi	r18, 0x14	; 20
 78c:	28 9f       	mul	r18, r24
 78e:	f0 01       	movw	r30, r0
 790:	29 9f       	mul	r18, r25
 792:	f0 0d       	add	r31, r0
 794:	11 24       	eor	r1, r1
 796:	e3 56       	subi	r30, 0x63	; 99
 798:	fc 4f       	sbci	r31, 0xFC	; 252
 79a:	27 85       	ldd	r18, Z+15	; 0x0f
		
		if( CadastroUsuarios[contAdm].ADM == '1' )
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
				senha[2] == CadastroUsuarios[contAdm].senha[2] &&
 79c:	32 13       	cpse	r19, r18
 79e:	52 c0       	rjmp	.+164    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				senha[3] == CadastroUsuarios[contAdm].senha[3] &&
				senha[4] == CadastroUsuarios[contAdm].senha[4] &&
 7a0:	3d 81       	ldd	r19, Y+5	; 0x05
 7a2:	24 e1       	ldi	r18, 0x14	; 20
 7a4:	28 9f       	mul	r18, r24
 7a6:	f0 01       	movw	r30, r0
 7a8:	29 9f       	mul	r18, r25
 7aa:	f0 0d       	add	r31, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	e3 56       	subi	r30, 0x63	; 99
 7b0:	fc 4f       	sbci	r31, 0xFC	; 252
 7b2:	20 89       	ldd	r18, Z+16	; 0x10
		if( CadastroUsuarios[contAdm].ADM == '1' )
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
				senha[2] == CadastroUsuarios[contAdm].senha[2] &&
				senha[3] == CadastroUsuarios[contAdm].senha[3] &&
 7b4:	32 13       	cpse	r19, r18
 7b6:	46 c0       	rjmp	.+140    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				senha[4] == CadastroUsuarios[contAdm].senha[4] &&
				senha[5] == CadastroUsuarios[contAdm].senha[5] )
 7b8:	2e 81       	ldd	r18, Y+6	; 0x06
 7ba:	34 e1       	ldi	r19, 0x14	; 20
 7bc:	38 9f       	mul	r19, r24
 7be:	f0 01       	movw	r30, r0
 7c0:	39 9f       	mul	r19, r25
 7c2:	f0 0d       	add	r31, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	e3 56       	subi	r30, 0x63	; 99
 7c8:	fc 4f       	sbci	r31, 0xFC	; 252
 7ca:	81 89       	ldd	r24, Z+17	; 0x11
		{
			if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
				senha[1] == CadastroUsuarios[contAdm].senha[1] &&
				senha[2] == CadastroUsuarios[contAdm].senha[2] &&
				senha[3] == CadastroUsuarios[contAdm].senha[3] &&
				senha[4] == CadastroUsuarios[contAdm].senha[4] &&
 7cc:	28 13       	cpse	r18, r24
 7ce:	3a c0       	rjmp	.+116    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7d0:	25 c0       	rjmp	.+74     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
			{
				contPorta = 0;
				senhaOk = 1;
				for( i = ENDERECO_EVENTOS; i < (ENDERECO_EVENTOS + ((g_contDadosEeprom) * QUANTIDADE_DADOS_EVENTOS)); i++)	// Verifica se em algum dos cadastros tem evento salvo
				{
					leMemoria = EepromRead(i);	// leMemoria recebe o endereço conUsuario * Quantidade_dados + i
 7d2:	c7 01       	movw	r24, r14
 7d4:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 7d8:	8f 83       	std	Y+7, r24	; 0x07
					if( leMemoria == 0xFF )	// Se leMemoria igual 0xFF
 7da:	8f 3f       	cpi	r24, 0xFF	; 255
 7dc:	91 f1       	breq	.+100    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
					{
						break;	// Break;
					}
					else    // Senão
					{
						if( leMemoria == '\r')
 7de:	8d 30       	cpi	r24, 0x0D	; 13
 7e0:	31 f4       	brne	.+12     	; 0x7ee <ListaEventos+0x1ac>
						{
							EscritaTexto(" ",sizeof(" "));	// Escreve a letra
 7e2:	62 e0       	ldi	r22, 0x02	; 2
 7e4:	8a e6       	ldi	r24, 0x6A	; 106
 7e6:	93 e0       	ldi	r25, 0x03	; 3
 7e8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <ListaEventos+0x1b6>
						}
						else
						{
							EscritaTexto(&leMemoria,1);
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	ce 01       	movw	r24, r28
 7f2:	07 96       	adiw	r24, 0x07	; 7
 7f4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
						}
						if( (i - ENDERECO_EVENTOS) % QUANTIDADE_DADOS_EVENTOS == 12 )
 7f8:	c7 01       	movw	r24, r14
 7fa:	88 55       	subi	r24, 0x58	; 88
 7fc:	92 40       	sbci	r25, 0x02	; 2
 7fe:	6d e0       	ldi	r22, 0x0D	; 13
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	0e 94 84 06 	call	0xd08	; 0xd08 <__divmodhi4>
 806:	0c 97       	sbiw	r24, 0x0c	; 12
 808:	29 f4       	brne	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
						{
							PULA_LINHA;
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	8e e4       	ldi	r24, 0x4E	; 78
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				senha[4] == CadastroUsuarios[contAdm].senha[4] &&
				senha[5] == CadastroUsuarios[contAdm].senha[5] )
			{
				contPorta = 0;
				senhaOk = 1;
				for( i = ENDERECO_EVENTOS; i < (ENDERECO_EVENTOS + ((g_contDadosEeprom) * QUANTIDADE_DADOS_EVENTOS)); i++)	// Verifica se em algum dos cadastros tem evento salvo
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	e8 1a       	sub	r14, r24
 818:	f8 0a       	sbc	r15, r24
 81a:	06 c0       	rjmp	.+12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 81c:	0f 2e       	mov	r0, r31
 81e:	f8 e5       	ldi	r31, 0x58	; 88
 820:	ef 2e       	mov	r14, r31
 822:	f2 e0       	ldi	r31, 0x02	; 2
 824:	ff 2e       	mov	r15, r31
 826:	f0 2d       	mov	r31, r0
 828:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 82c:	2d e0       	ldi	r18, 0x0D	; 13
 82e:	82 9f       	mul	r24, r18
 830:	c0 01       	movw	r24, r0
 832:	11 24       	eor	r1, r1
 834:	88 5a       	subi	r24, 0xA8	; 168
 836:	9d 4f       	sbci	r25, 0xFD	; 253
 838:	e8 16       	cp	r14, r24
 83a:	f9 06       	cpc	r15, r25
 83c:	54 f2       	brlt	.-108    	; 0x7d2 <ListaEventos+0x190>
				senha[3] == CadastroUsuarios[contAdm].senha[3] &&
				senha[4] == CadastroUsuarios[contAdm].senha[4] &&
				senha[5] == CadastroUsuarios[contAdm].senha[5] )
			{
				contPorta = 0;
				senhaOk = 1;
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 842:	41 e0       	ldi	r20, 0x01	; 1
	}
	PULA_LINHA;
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0, contDadosEventos = 0;
	char leMemoria = 0;
	int i;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 844:	1f 5f       	subi	r17, 0xFF	; 255
 846:	1e 31       	cpi	r17, 0x1E	; 30
 848:	08 f4       	brcc	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84a:	6c cf       	rjmp	.-296    	; 0x724 <ListaEventos+0xe2>
					}
				}
			}
		}
	}
	if( senhaOk == 0 )
 84c:	41 11       	cpse	r20, r1
 84e:	05 c0       	rjmp	.+10     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	{
		EscritaTexto("Senha incorreta!\r", sizeof("Senha incorreta!\r"));
 850:	62 e1       	ldi	r22, 0x12	; 18
 852:	82 e7       	ldi	r24, 0x72	; 114
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	}
}
 85a:	27 96       	adiw	r28, 0x07	; 7
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	08 95       	ret

00000874 <LiberaSala1>:
	}
}*/


void LiberaSala1( char portaLiberada )
{
 874:	df 92       	push	r13
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	00 d0       	rcall	.+0      	; 0x884 <LiberaSala1+0x10>
 884:	00 d0       	rcall	.+0      	; 0x886 <LiberaSala1+0x12>
 886:	00 d0       	rcall	.+0      	; 0x888 <LiberaSala1+0x14>
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	d8 2e       	mov	r13, r24
	char contTexto = 0, senha[6], flagEnter = 0;
	recebeuDado = 0;
 88e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
	if( EepromRead(0x00) == 0xFF )	// Se o dado na posição 0 é 0xFF
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 61 00 	call	0xc2	; 0xc2 <EepromRead>
 89a:	8f 3f       	cpi	r24, 0xFF	; 255
 89c:	31 f4       	brne	.+12     	; 0x8aa <LiberaSala1+0x36>
	{
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
 89e:	61 e2       	ldi	r22, 0x21	; 33
 8a0:	8e ef       	ldi	r24, 0xFE	; 254
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
 8a8:	01 c1       	rjmp	.+514    	; 0xaac <__stack+0x1ad>
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
 8aa:	64 e2       	ldi	r22, 0x24	; 36
 8ac:	8e e4       	ldi	r24, 0x4E	; 78
 8ae:	92 e0       	ldi	r25, 0x02	; 2
 8b0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
}*/


void LiberaSala1( char portaLiberada )
{
	char contTexto = 0, senha[6], flagEnter = 0;
 8b4:	f1 2c       	mov	r15, r1
 8b6:	00 e0       	ldi	r16, 0x00	; 0
	{
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
	while( flagEnter != 1 )
 8b8:	41 c0       	rjmp	.+130    	; 0x93c <__stack+0x3d>
	{
		do   // Faça enquanto o número definido não está entre 0 e 9
		{
			if( recebeuDado != 0 )	// Se há algo na serial
 8ba:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 8be:	88 23       	and	r24, r24
 8c0:	a9 f1       	breq	.+106    	; 0x92c <__stack+0x2d>
			{
				EscritaTexto(&(recebeuDado),1);
 8c2:	61 e0       	ldi	r22, 0x01	; 1
 8c4:	8c e9       	ldi	r24, 0x9C	; 156
 8c6:	93 e0       	ldi	r25, 0x03	; 3
 8c8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
 8cc:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 8d0:	90 ed       	ldi	r25, 0xD0	; 208
 8d2:	98 0f       	add	r25, r24
 8d4:	9a 30       	cpi	r25, 0x0A	; 10
 8d6:	b0 f0       	brcs	.+44     	; 0x904 <__stack+0x5>
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
 8d8:	67 e1       	ldi	r22, 0x17	; 23
 8da:	8f e9       	ldi	r24, 0x9F	; 159
 8dc:	91 e0       	ldi	r25, 0x01	; 1
 8de:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
					for(char i = 0; i < contTexto; i++ )
 8e2:	10 e0       	ldi	r17, 0x00	; 0
 8e4:	0a c0       	rjmp	.+20     	; 0x8fa <LiberaSala1+0x86>
					{
						EscritaTexto(&(senha[i]), 1);
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	8c 0f       	add	r24, r28
 8ee:	9d 1f       	adc	r25, r29
 8f0:	81 0f       	add	r24, r17
 8f2:	91 1d       	adc	r25, r1
 8f4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
			{
				EscritaTexto(&(recebeuDado),1);
				if( recebeuDado < '0' || recebeuDado > '9' )	// Se o valor está fora de 0 a 9
				{
					EscritaTexto("Digite apenas numeros\r", sizeof("Digite apenas numeros\r"));
					for(char i = 0; i < contTexto; i++ )
 8f8:	1f 5f       	subi	r17, 0xFF	; 255
 8fa:	10 17       	cp	r17, r16
 8fc:	a0 f3       	brcs	.-24     	; 0x8e6 <LiberaSala1+0x72>
					{
						EscritaTexto(&(senha[i]), 1);
					}
						
					recebeuDado = 0;
 8fe:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
 902:	14 c0       	rjmp	.+40     	; 0x92c <__stack+0x2d>
				}
				else if( recebeuDado != 0 )	// Se há caracter a ser lido
 904:	88 23       	and	r24, r24
 906:	91 f0       	breq	.+36     	; 0x92c <__stack+0x2d>
				{
					if( recebeuDado == 0x08 ) // Se backspace
 908:	88 30       	cpi	r24, 0x08	; 8
 90a:	21 f4       	brne	.+8      	; 0x914 <__stack+0x15>
					{
						if( contTexto > 0 )	// Impede que seja menor que 0
 90c:	00 23       	and	r16, r16
 90e:	51 f0       	breq	.+20     	; 0x924 <__stack+0x25>
						{
							contTexto--;	// Decrementa contTexto
 910:	01 50       	subi	r16, 0x01	; 1
 912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0x25>
							contTexto = 0;	// contTexto recebe 0
						}
					}
					else
					{
						senha[contTexto] = recebeuDado;
 914:	e1 e0       	ldi	r30, 0x01	; 1
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	ec 0f       	add	r30, r28
 91a:	fd 1f       	adc	r31, r29
 91c:	e0 0f       	add	r30, r16
 91e:	f1 1d       	adc	r31, r1
 920:	80 83       	st	Z, r24
						contTexto++;
 922:	0f 5f       	subi	r16, 0xFF	; 255
					}
						
					recebeuDado = 0;
 924:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
 928:	06 30       	cpi	r16, 0x06	; 6
 92a:	31 f0       	breq	.+12     	; 0x938 <__stack+0x39>
					}
						
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
 92c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 930:	80 53       	subi	r24, 0x30	; 48
 932:	8a 30       	cpi	r24, 0x0A	; 10
 934:	10 f6       	brcc	.-124    	; 0x8ba <LiberaSala1+0x46>
 936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
					}
						
					recebeuDado = 0;
					if( contTexto == 6 )	// Chegou ao final do número de caracteres
					{
						flagEnter = 1;
 938:	ff 24       	eor	r15, r15
 93a:	f3 94       	inc	r15
	{
		EscritaTexto("Nao ha funcionarios cadastrados\r", sizeof("Nao ha funcionarios cadastrados\r"));	// Escreve "Não há funcionários cadastrados"
		return;
	}
	EscritaTexto("Entre com a senha de admnistrador: ", sizeof("Entre com a senha de admnistrador: "));
	while( flagEnter != 1 )
 93c:	21 e0       	ldi	r18, 0x01	; 1
 93e:	f2 12       	cpse	r15, r18
 940:	bc cf       	rjmp	.-136    	; 0x8ba <LiberaSala1+0x46>
				}
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}
	PULA_LINHA;
 942:	62 e0       	ldi	r22, 0x02	; 2
 944:	8e e4       	ldi	r24, 0x4E	; 78
 946:	91 e0       	ldi	r25, 0x01	; 1
 948:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0;
	char leMemoria;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 94c:	10 e0       	ldi	r17, 0x00	; 0
			}

		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}
	PULA_LINHA;
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0;
 94e:	20 e0       	ldi	r18, 0x00	; 0
	char leMemoria;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 950:	a3 c0       	rjmp	.+326    	; 0xa98 <__stack+0x199>
	{

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
 952:	99 81       	ldd	r25, Y+1	; 0x01
 954:	e1 2e       	mov	r14, r17
 956:	f1 2c       	mov	r15, r1
 958:	84 e1       	ldi	r24, 0x14	; 20
 95a:	8e 9d       	mul	r24, r14
 95c:	f0 01       	movw	r30, r0
 95e:	8f 9d       	mul	r24, r15
 960:	f0 0d       	add	r31, r0
 962:	11 24       	eor	r1, r1
 964:	e3 56       	subi	r30, 0x63	; 99
 966:	fc 4f       	sbci	r31, 0xFC	; 252
 968:	84 85       	ldd	r24, Z+12	; 0x0c
 96a:	98 13       	cpse	r25, r24
 96c:	94 c0       	rjmp	.+296    	; 0xa96 <__stack+0x197>
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
 96e:	9a 81       	ldd	r25, Y+2	; 0x02
 970:	84 e1       	ldi	r24, 0x14	; 20
 972:	8e 9d       	mul	r24, r14
 974:	f0 01       	movw	r30, r0
 976:	8f 9d       	mul	r24, r15
 978:	f0 0d       	add	r31, r0
 97a:	11 24       	eor	r1, r1
 97c:	e3 56       	subi	r30, 0x63	; 99
 97e:	fc 4f       	sbci	r31, 0xFC	; 252
 980:	85 85       	ldd	r24, Z+13	; 0x0d
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0;
	char leMemoria;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
	{

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
 982:	98 13       	cpse	r25, r24
 984:	88 c0       	rjmp	.+272    	; 0xa96 <__stack+0x197>
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
 986:	9b 81       	ldd	r25, Y+3	; 0x03
 988:	84 e1       	ldi	r24, 0x14	; 20
 98a:	8e 9d       	mul	r24, r14
 98c:	f0 01       	movw	r30, r0
 98e:	8f 9d       	mul	r24, r15
 990:	f0 0d       	add	r31, r0
 992:	11 24       	eor	r1, r1
 994:	e3 56       	subi	r30, 0x63	; 99
 996:	fc 4f       	sbci	r31, 0xFC	; 252
 998:	86 85       	ldd	r24, Z+14	; 0x0e
	char leMemoria;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
	{

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
 99a:	98 13       	cpse	r25, r24
 99c:	7c c0       	rjmp	.+248    	; 0xa96 <__stack+0x197>
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
			senha[3] == CadastroUsuarios[contAdm].senha[3] &&
 99e:	9c 81       	ldd	r25, Y+4	; 0x04
 9a0:	84 e1       	ldi	r24, 0x14	; 20
 9a2:	8e 9d       	mul	r24, r14
 9a4:	f0 01       	movw	r30, r0
 9a6:	8f 9d       	mul	r24, r15
 9a8:	f0 0d       	add	r31, r0
 9aa:	11 24       	eor	r1, r1
 9ac:	e3 56       	subi	r30, 0x63	; 99
 9ae:	fc 4f       	sbci	r31, 0xFC	; 252
 9b0:	87 85       	ldd	r24, Z+15	; 0x0f
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
	{

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
 9b2:	98 13       	cpse	r25, r24
 9b4:	70 c0       	rjmp	.+224    	; 0xa96 <__stack+0x197>
			senha[3] == CadastroUsuarios[contAdm].senha[3] &&
			senha[4] == CadastroUsuarios[contAdm].senha[4] &&
 9b6:	9d 81       	ldd	r25, Y+5	; 0x05
 9b8:	84 e1       	ldi	r24, 0x14	; 20
 9ba:	8e 9d       	mul	r24, r14
 9bc:	f0 01       	movw	r30, r0
 9be:	8f 9d       	mul	r24, r15
 9c0:	f0 0d       	add	r31, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	e3 56       	subi	r30, 0x63	; 99
 9c6:	fc 4f       	sbci	r31, 0xFC	; 252
 9c8:	80 89       	ldd	r24, Z+16	; 0x10
	{

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
			senha[3] == CadastroUsuarios[contAdm].senha[3] &&
 9ca:	98 13       	cpse	r25, r24
 9cc:	64 c0       	rjmp	.+200    	; 0xa96 <__stack+0x197>
			senha[4] == CadastroUsuarios[contAdm].senha[4] &&
			senha[5] == CadastroUsuarios[contAdm].senha[5] )
 9ce:	9e 81       	ldd	r25, Y+6	; 0x06
 9d0:	84 e1       	ldi	r24, 0x14	; 20
 9d2:	8e 9d       	mul	r24, r14
 9d4:	f0 01       	movw	r30, r0
 9d6:	8f 9d       	mul	r24, r15
 9d8:	f0 0d       	add	r31, r0
 9da:	11 24       	eor	r1, r1
 9dc:	e3 56       	subi	r30, 0x63	; 99
 9de:	fc 4f       	sbci	r31, 0xFC	; 252
 9e0:	81 89       	ldd	r24, Z+17	; 0x11

		if( senha[0] == CadastroUsuarios[contAdm].senha[0] &&
			senha[1] == CadastroUsuarios[contAdm].senha[1] &&
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
			senha[3] == CadastroUsuarios[contAdm].senha[3] &&
			senha[4] == CadastroUsuarios[contAdm].senha[4] &&
 9e2:	98 13       	cpse	r25, r24
 9e4:	58 c0       	rjmp	.+176    	; 0xa96 <__stack+0x197>
			senha[5] == CadastroUsuarios[contAdm].senha[5] )
		{
			senhaOk = 1;
			g_flagPortaAtiva = 1;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <g_flagPortaAtiva>
			char i;
			for( i = 0; i < 12; i++ )	// Escreve o nome no endereço dos eventos
 9ec:	00 e0       	ldi	r16, 0x00	; 0
 9ee:	1a c0       	rjmp	.+52     	; 0xa24 <__stack+0x125>
			{
				EepromWrite(ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) + i, CadastroUsuarios[contAdm].nome[i]);
 9f0:	20 2f       	mov	r18, r16
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	84 e1       	ldi	r24, 0x14	; 20
 9f6:	8e 9d       	mul	r24, r14
 9f8:	f0 01       	movw	r30, r0
 9fa:	8f 9d       	mul	r24, r15
 9fc:	f0 0d       	add	r31, r0
 9fe:	11 24       	eor	r1, r1
 a00:	e3 56       	subi	r30, 0x63	; 99
 a02:	fc 4f       	sbci	r31, 0xFC	; 252
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	60 81       	ld	r22, Z
 a0a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 a0e:	4d e0       	ldi	r20, 0x0D	; 13
 a10:	84 9f       	mul	r24, r20
 a12:	c0 01       	movw	r24, r0
 a14:	11 24       	eor	r1, r1
 a16:	88 5a       	subi	r24, 0xA8	; 168
 a18:	9d 4f       	sbci	r25, 0xFD	; 253
 a1a:	82 0f       	add	r24, r18
 a1c:	93 1f       	adc	r25, r19
 a1e:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
			senha[5] == CadastroUsuarios[contAdm].senha[5] )
		{
			senhaOk = 1;
			g_flagPortaAtiva = 1;
			char i;
			for( i = 0; i < 12; i++ )	// Escreve o nome no endereço dos eventos
 a22:	0f 5f       	subi	r16, 0xFF	; 255
 a24:	0c 30       	cpi	r16, 0x0C	; 12
 a26:	20 f3       	brcs	.-56     	; 0x9f0 <__stack+0xf1>
			{
				EepromWrite(ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) + i, CadastroUsuarios[contAdm].nome[i]);
			}
			if( portaLiberada == 1 )	// Se porta for 1
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	d8 12       	cpse	r13, r24
 a2c:	13 c0       	rjmp	.+38     	; 0xa54 <__stack+0x155>
			{
				/*
				ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) = 600 + g_contDadosEeprom * 13
				*/
				flagPorta1 = 1;
 a2e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <flagPorta1>
				EepromWrite(ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) + i, '1');	// Escreve o número '1' na memória
 a32:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 a36:	2d e0       	ldi	r18, 0x0D	; 13
 a38:	82 9f       	mul	r24, r18
 a3a:	c0 01       	movw	r24, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	88 5a       	subi	r24, 0xA8	; 168
 a40:	9d 4f       	sbci	r25, 0xFD	; 253
 a42:	61 e3       	ldi	r22, 0x31	; 49
 a44:	80 0f       	add	r24, r16
 a46:	91 1d       	adc	r25, r1
 a48:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
				LED1_ON;
 a4c:	88 b1       	in	r24, 0x08	; 8
 a4e:	81 60       	ori	r24, 0x01	; 1
 a50:	88 b9       	out	0x08, r24	; 8
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <__stack+0x181>
			}
			else if( portaLiberada == 2 )
 a54:	42 e0       	ldi	r20, 0x02	; 2
 a56:	d4 12       	cpse	r13, r20
 a58:	13 c0       	rjmp	.+38     	; 0xa80 <__stack+0x181>
			{
				/*
				ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) = 600 + g_contDadosEeprom * 13
				*/
				flagPorta2 = 1;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <flagPorta2>
				EepromWrite(ENDERECO_EVENTOS + (g_contDadosEeprom * QUANTIDADE_DADOS_EVENTOS) + i, '2');	// Escreve o número '2' na memória
 a60:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 a64:	2d e0       	ldi	r18, 0x0D	; 13
 a66:	82 9f       	mul	r24, r18
 a68:	c0 01       	movw	r24, r0
 a6a:	11 24       	eor	r1, r1
 a6c:	88 5a       	subi	r24, 0xA8	; 168
 a6e:	9d 4f       	sbci	r25, 0xFD	; 253
 a70:	62 e3       	ldi	r22, 0x32	; 50
 a72:	80 0f       	add	r24, r16
 a74:	91 1d       	adc	r25, r1
 a76:	0e 94 53 00 	call	0xa6	; 0xa6 <EepromWrite>
				LED2_ON;
 a7a:	88 b1       	in	r24, 0x08	; 8
 a7c:	82 60       	ori	r24, 0x02	; 2
 a7e:	88 b9       	out	0x08, r24	; 8
			}
			g_contDadosEeprom++;	// Incrementa o contador de dados da Eeprom
 a80:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_contDadosEeprom>
 a84:	8f 5f       	subi	r24, 0xFF	; 255
 a86:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <g_contDadosEeprom>
			EscritaTexto("Porta liberada!\r", sizeof("Porta liberada!\r"));	// Escreve "Porta Liberada"
 a8a:	61 e1       	ldi	r22, 0x11	; 17
 a8c:	84 e8       	ldi	r24, 0x84	; 132
 a8e:	92 e0       	ldi	r25, 0x02	; 2
 a90:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
			senha[2] == CadastroUsuarios[contAdm].senha[2] &&
			senha[3] == CadastroUsuarios[contAdm].senha[3] &&
			senha[4] == CadastroUsuarios[contAdm].senha[4] &&
			senha[5] == CadastroUsuarios[contAdm].senha[5] )
		{
			senhaOk = 1;
 a94:	21 e0       	ldi	r18, 0x01	; 1
		}while( recebeuDado < '0' || recebeuDado > '9' ); // Faça enquanto o caracter é diferente de número
	}
	PULA_LINHA;
	unsigned char contOk = 0, contPorta = 0, senhaOk = 0;
	char leMemoria;
	for( char contAdm = 0; contAdm < QUANTIDADE_CADASTROS; contAdm++ )
 a96:	1f 5f       	subi	r17, 0xFF	; 255
 a98:	1e 31       	cpi	r17, 0x1E	; 30
 a9a:	08 f4       	brcc	.+2      	; 0xa9e <__stack+0x19f>
 a9c:	5a cf       	rjmp	.-332    	; 0x952 <__stack+0x53>
			}
			g_contDadosEeprom++;	// Incrementa o contador de dados da Eeprom
			EscritaTexto("Porta liberada!\r", sizeof("Porta liberada!\r"));	// Escreve "Porta Liberada"
		}
	}
	if( senhaOk == 0 )	// Se não tem senha
 a9e:	21 11       	cpse	r18, r1
 aa0:	05 c0       	rjmp	.+10     	; 0xaac <__stack+0x1ad>
	{
		EscritaTexto("Senha incorreta!\r", sizeof("Senha incorreta!\r"));	// Escreve "Senha incorreta!"
 aa2:	62 e1       	ldi	r22, 0x12	; 18
 aa4:	82 e7       	ldi	r24, 0x72	; 114
 aa6:	92 e0       	ldi	r25, 0x02	; 2
 aa8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	}
}
 aac:	26 96       	adiw	r28, 0x06	; 6
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	cd bf       	out	0x3d, r28	; 61
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	1f 91       	pop	r17
 abe:	0f 91       	pop	r16
 ac0:	ff 90       	pop	r15
 ac2:	ef 90       	pop	r14
 ac4:	df 90       	pop	r13
 ac6:	08 95       	ret

00000ac8 <MenuPrincipal>:
	


void MenuPrincipal( void ){

	EscritaTexto("Menu Principal Gerenciamento de Acesso\r", sizeof("Menu Principal Gerenciamento de Acesso\r"));
 ac8:	68 e2       	ldi	r22, 0x28	; 40
 aca:	85 e9       	ldi	r24, 0x95	; 149
 acc:	92 e0       	ldi	r25, 0x02	; 2
 ace:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("PD Solucoes\r", sizeof("PD Solucoes\r"));
 ad2:	6d e0       	ldi	r22, 0x0D	; 13
 ad4:	8d eb       	ldi	r24, 0xBD	; 189
 ad6:	92 e0       	ldi	r25, 0x02	; 2
 ad8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("1 - Cadastro do usuario\r", sizeof("1 - Cadastro do usuário\r"));
 adc:	69 e1       	ldi	r22, 0x19	; 25
 ade:	8a ec       	ldi	r24, 0xCA	; 202
 ae0:	92 e0       	ldi	r25, 0x02	; 2
 ae2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("2 - Lista dos usuarios cadastrados\r", sizeof("2 - Lista dos usuarios cadastrados\r"));
 ae6:	64 e2       	ldi	r22, 0x24	; 36
 ae8:	83 ee       	ldi	r24, 0xE3	; 227
 aea:	92 e0       	ldi	r25, 0x02	; 2
 aec:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("3 - Lista dos eventos\r", sizeof("3 - Lista dos eventos\r"));
 af0:	67 e1       	ldi	r22, 0x17	; 23
 af2:	87 e0       	ldi	r24, 0x07	; 7
 af4:	93 e0       	ldi	r25, 0x03	; 3
 af6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("4 - Libera a porta 1\r", sizeof("4 - Libera a porta 1\r"));
 afa:	66 e1       	ldi	r22, 0x16	; 22
 afc:	8e e1       	ldi	r24, 0x1E	; 30
 afe:	93 e0       	ldi	r25, 0x03	; 3
 b00:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("5 - Libera a porta 2\r", sizeof("5 - Libera a porta 2\r"));
 b04:	66 e1       	ldi	r22, 0x16	; 22
 b06:	84 e3       	ldi	r24, 0x34	; 52
 b08:	93 e0       	ldi	r25, 0x03	; 3
 b0a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	EscritaTexto("Escolha o comando (entre 1 e 5): ", sizeof("Escolha o comando (entre 1 e 5): "));
 b0e:	62 e2       	ldi	r22, 0x22	; 34
 b10:	8a e4       	ldi	r24, 0x4A	; 74
 b12:	93 e0       	ldi	r25, 0x03	; 3
 b14:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	recebeuDado = 0;
 b18:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
	
	do   // Faça enquanto o número definido não está entre 1 e 5
	{
		if( recebeuDado != 0 )	// Se há algo na serial
 b1c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 b20:	88 23       	and	r24, r24
 b22:	89 f0       	breq	.+34     	; 0xb46 <MenuPrincipal+0x7e>
		{
			EscritaTexto(&(recebeuDado),1);
 b24:	61 e0       	ldi	r22, 0x01	; 1
 b26:	8c e9       	ldi	r24, 0x9C	; 156
 b28:	93 e0       	ldi	r25, 0x03	; 3
 b2a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
			if( recebeuDado < '1' || recebeuDado > '5')	// Se o valor está fora de 1 a 5
 b2e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 b32:	81 53       	subi	r24, 0x31	; 49
 b34:	85 30       	cpi	r24, 0x05	; 5
 b36:	38 f0       	brcs	.+14     	; 0xb46 <MenuPrincipal+0x7e>
			{
				EscritaTexto("Numero errado!. Escolha entre 1 a 5\r", sizeof("Numero errado!. Escolha entre 1 a 5\r"));
 b38:	65 e2       	ldi	r22, 0x25	; 37
 b3a:	8c e6       	ldi	r24, 0x6C	; 108
 b3c:	93 e0       	ldi	r25, 0x03	; 3
 b3e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
				recebeuDado = 0;
 b42:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <recebeuDado>
			}
		}

	}while( recebeuDado < '1' || recebeuDado > '5');
 b46:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 b4a:	81 53       	subi	r24, 0x31	; 49
 b4c:	85 30       	cpi	r24, 0x05	; 5
 b4e:	30 f7       	brcc	.-52     	; 0xb1c <MenuPrincipal+0x54>
	PULA_LINHA;	
 b50:	62 e0       	ldi	r22, 0x02	; 2
 b52:	8e e4       	ldi	r24, 0x4E	; 78
 b54:	91 e0       	ldi	r25, 0x01	; 1
 b56:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
	switch( recebeuDado )	// Escolha de acordo com o estado definido
 b5a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <recebeuDado>
 b5e:	83 33       	cpi	r24, 0x33	; 51
 b60:	89 f0       	breq	.+34     	; 0xb84 <MenuPrincipal+0xbc>
 b62:	28 f4       	brcc	.+10     	; 0xb6e <MenuPrincipal+0xa6>
 b64:	81 33       	cpi	r24, 0x31	; 49
 b66:	41 f0       	breq	.+16     	; 0xb78 <MenuPrincipal+0xb0>
 b68:	82 33       	cpi	r24, 0x32	; 50
 b6a:	49 f0       	breq	.+18     	; 0xb7e <MenuPrincipal+0xb6>
 b6c:	15 c0       	rjmp	.+42     	; 0xb98 <MenuPrincipal+0xd0>
 b6e:	84 33       	cpi	r24, 0x34	; 52
 b70:	61 f0       	breq	.+24     	; 0xb8a <MenuPrincipal+0xc2>
 b72:	85 33       	cpi	r24, 0x35	; 53
 b74:	71 f0       	breq	.+28     	; 0xb92 <MenuPrincipal+0xca>
 b76:	10 c0       	rjmp	.+32     	; 0xb98 <MenuPrincipal+0xd0>
	{
		case '1':	// Caso 1 - Cadastro de usuário
			CadastroUsuario();	// Chama a função de cadastro do usuário
 b78:	0e 94 43 01 	call	0x286	; 0x286 <CadastroUsuario>
		break;
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <MenuPrincipal+0xd0>
		case '2':	// Caso 2 - Lista de usuários
			ListaUsuario();
 b7e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ListaUsuario>
		break;
 b82:	0a c0       	rjmp	.+20     	; 0xb98 <MenuPrincipal+0xd0>
		case '3':	// Caso 3 - Lista de eventos
			ListaEventos();		
 b84:	0e 94 21 03 	call	0x642	; 0x642 <ListaEventos>
		break;
 b88:	07 c0       	rjmp	.+14     	; 0xb98 <MenuPrincipal+0xd0>
		case '4':	// Caso 4 - Libera a porta 1
			LiberaSala1(1);
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	0e 94 3a 04 	call	0x874	; 0x874 <LiberaSala1>
		break;
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <MenuPrincipal+0xd0>
		case '5':	// Caso 5 - Libera a porta 2
			LiberaSala1(2);
 b92:	82 e0       	ldi	r24, 0x02	; 2
 b94:	0e 94 3a 04 	call	0x874	; 0x874 <LiberaSala1>
		break;
	}
	PULA_LINHA;
 b98:	62 e0       	ldi	r22, 0x02	; 2
 b9a:	8e e4       	ldi	r24, 0x4E	; 78
 b9c:	91 e0       	ldi	r25, 0x01	; 1
 b9e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EscritaTexto>
 ba2:	08 95       	ret

00000ba4 <main>:
void ListaEventos( void );
void LiberaSala1( char portaLiberada );

int main(void)
{
	sei();
 ba4:	78 94       	sei
	ConfigUart();
 ba6:	0e 94 41 06 	call	0xc82	; 0xc82 <ConfigUart>
	ConfigGpio();
 baa:	0e 94 6c 00 	call	0xd8	; 0xd8 <ConfigGpio>
	InicializaStruct();
 bae:	0e 94 77 00 	call	0xee	; 0xee <InicializaStruct>
	TimerConfig();
 bb2:	0e 94 de 05 	call	0xbbc	; 0xbbc <TimerConfig>
    /* Replace with your application code */

    while (1) 
    {
		MenuPrincipal();	// Chama o menu principal 			
 bb6:	0e 94 64 05 	call	0xac8	; 0xac8 <MenuPrincipal>
 bba:	fd cf       	rjmp	.-6      	; 0xbb6 <main+0x12>

00000bbc <TimerConfig>:
extern unsigned char g_flagPortaAtiva, flagPorta1, flagPorta2;

void TimerConfig( void )
{
	
	TCCR0A = 0; // Conta até o valor de comparação OCR0A
 bbc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = ( 1 << CS01 ) | ( 1 << CS00 ); // Clock sem prescaler
 bbe:	83 e0       	ldi	r24, 0x03	; 3
 bc0:	85 bd       	out	0x25, r24	; 37
	TIFR0 = 1 << TOV0;
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= 1 << TOIE0;
 bc6:	ee e6       	ldi	r30, 0x6E	; 110
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	81 60       	ori	r24, 0x01	; 1
 bce:	80 83       	st	Z, r24
	TCNT0 = 0;
 bd0:	16 bc       	out	0x26, r1	; 38
 bd2:	08 95       	ret

00000bd4 <__vector_16>:
	
}

ISR( TIMER0_OVF_vect )
{
 bd4:	1f 92       	push	r1
 bd6:	0f 92       	push	r0
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	0f 92       	push	r0
 bdc:	11 24       	eor	r1, r1
 bde:	2f 93       	push	r18
 be0:	8f 93       	push	r24
 be2:	9f 93       	push	r25
	
	TCNT0 = 255 - 125;
 be4:	82 e8       	ldi	r24, 0x82	; 130
 be6:	86 bd       	out	0x26, r24	; 38
	if( (flagPorta1 == 1) && (BOT1_PRESS == PRESS))
 be8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <flagPorta1>
 bec:	81 30       	cpi	r24, 0x01	; 1
 bee:	59 f4       	brne	.+22     	; 0xc06 <__vector_16+0x32>
 bf0:	32 99       	sbic	0x06, 2	; 6
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <__vector_16+0x32>
	{
		g_flagPortaAtiva = 0;
 bf4:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <g_flagPortaAtiva>
		timeoutPorta = 0;
 bf8:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <timeoutPorta>
		flagPorta1 = 0;
 bfc:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <flagPorta1>
		LED1_OFF;
 c00:	88 b1       	in	r24, 0x08	; 8
 c02:	8e 7f       	andi	r24, 0xFE	; 254
 c04:	88 b9       	out	0x08, r24	; 8
	}
	if( (flagPorta2 == 1) && (BOT2_PRESS == PRESS))
 c06:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <flagPorta2>
 c0a:	81 30       	cpi	r24, 0x01	; 1
 c0c:	59 f4       	brne	.+22     	; 0xc24 <__vector_16+0x50>
 c0e:	33 99       	sbic	0x06, 3	; 6
 c10:	09 c0       	rjmp	.+18     	; 0xc24 <__vector_16+0x50>
	{
		g_flagPortaAtiva = 0;
 c12:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <g_flagPortaAtiva>
		timeoutPorta = 0;
 c16:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <timeoutPorta>
		flagPorta2 = 0;
 c1a:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <flagPorta2>
		LED2_OFF;
 c1e:	88 b1       	in	r24, 0x08	; 8
 c20:	8d 7f       	andi	r24, 0xFD	; 253
 c22:	88 b9       	out	0x08, r24	; 8
	}
	if( timer1segundo < 1000 )
 c24:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <timer1segundo>
 c28:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <timer1segundo+0x1>
 c2c:	88 3e       	cpi	r24, 0xE8	; 232
 c2e:	23 e0       	ldi	r18, 0x03	; 3
 c30:	92 07       	cpc	r25, r18
 c32:	30 f4       	brcc	.+12     	; 0xc40 <__vector_16+0x6c>
	{
		timer1segundo++;
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <timer1segundo+0x1>
 c3a:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <timer1segundo>
 c3e:	19 c0       	rjmp	.+50     	; 0xc72 <__vector_16+0x9e>
	}
	else
	{
		timer1segundo = 0;
 c40:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <timer1segundo+0x1>
 c44:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <timer1segundo>
		if( g_flagPortaAtiva )
 c48:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <g_flagPortaAtiva>
 c4c:	88 23       	and	r24, r24
 c4e:	89 f0       	breq	.+34     	; 0xc72 <__vector_16+0x9e>
		{
			timeoutPorta++;
 c50:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <timeoutPorta>
 c54:	8f 5f       	subi	r24, 0xFF	; 255
 c56:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <timeoutPorta>
			if( (timeoutPorta >= 5) )
 c5a:	85 30       	cpi	r24, 0x05	; 5
 c5c:	50 f0       	brcs	.+20     	; 0xc72 <__vector_16+0x9e>
			{
				g_flagPortaAtiva = 0;
 c5e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <g_flagPortaAtiva>
				timeoutPorta = 0;
 c62:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <timeoutPorta>
				LED1_OFF;
 c66:	88 b1       	in	r24, 0x08	; 8
 c68:	8e 7f       	andi	r24, 0xFE	; 254
 c6a:	88 b9       	out	0x08, r24	; 8
				LED2_OFF;
 c6c:	88 b1       	in	r24, 0x08	; 8
 c6e:	8d 7f       	andi	r24, 0xFD	; 253
 c70:	88 b9       	out	0x08, r24	; 8
			}
		}
	}
	
 c72:	9f 91       	pop	r25
 c74:	8f 91       	pop	r24
 c76:	2f 91       	pop	r18
 c78:	0f 90       	pop	r0
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	0f 90       	pop	r0
 c7e:	1f 90       	pop	r1
 c80:	18 95       	reti

00000c82 <ConfigUart>:
{
	/*
	 Configuração da Uart. Configurado com baudrate de 9600
	 Relação de cálculo de BaudRate = 8000000/(9600 * 16) - 1 = 51
	*/
	UBRR0H = (unsigned char)(0);	// Define os 8 bits mais significativos do Baud Rate
 c82:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)51;		// Define os 8 bits menos significativos do Baud Rate
 c86:	83 e3       	ldi	r24, 0x33	; 51
 c88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);		// Habilita o TX, RX e interrupção da USART
 c8c:	88 e9       	ldi	r24, 0x98	; 152
 c8e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);	// Dados em 8 bits e 1 bit de parada
 c92:	86 e0       	ldi	r24, 0x06	; 6
 c94:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 c98:	08 95       	ret

00000c9a <EscritaTexto>:
	
}

void EscritaTexto( char *caracter, unsigned char tamanho )
{
 c9a:	fc 01       	movw	r30, r24
	while(tamanho > 0)	// Enquanto tamanho maior que 0
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <EscritaTexto+0x16>
	{	
		while (!( UCSR0A & (1<<UDRE0)));	// Enquanto o buffer está cheio
 c9e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 ca2:	95 ff       	sbrs	r25, 5
 ca4:	fc cf       	rjmp	.-8      	; 0xc9e <EscritaTexto+0x4>
		UDR0 = *caracter++;	// UDRO recebe *ponteiro++ (caracter)
 ca6:	80 81       	ld	r24, Z
 ca8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		tamanho--;	// tamanho decrementa 1
 cac:	61 50       	subi	r22, 0x01	; 1
void EscritaTexto( char *caracter, unsigned char tamanho )
{
	while(tamanho > 0)	// Enquanto tamanho maior que 0
	{	
		while (!( UCSR0A & (1<<UDRE0)));	// Enquanto o buffer está cheio
		UDR0 = *caracter++;	// UDRO recebe *ponteiro++ (caracter)
 cae:	31 96       	adiw	r30, 0x01	; 1
	
}

void EscritaTexto( char *caracter, unsigned char tamanho )
{
	while(tamanho > 0)	// Enquanto tamanho maior que 0
 cb0:	61 11       	cpse	r22, r1
 cb2:	f5 cf       	rjmp	.-22     	; 0xc9e <EscritaTexto+0x4>
	{	
		while (!( UCSR0A & (1<<UDRE0)));	// Enquanto o buffer está cheio
		UDR0 = *caracter++;	// UDRO recebe *ponteiro++ (caracter)
		tamanho--;	// tamanho decrementa 1
	}
}
 cb4:	08 95       	ret

00000cb6 <LeSerial>:

unsigned char LeSerial( void )
{
	return UDR0;	//Retorna a leitura da Serial
 cb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 cba:	08 95       	ret

00000cbc <__vector_18>:

ISR( USART_RX_vect )
{
 cbc:	1f 92       	push	r1
 cbe:	0f 92       	push	r0
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	0f 92       	push	r0
 cc4:	11 24       	eor	r1, r1
 cc6:	2f 93       	push	r18
 cc8:	3f 93       	push	r19
 cca:	4f 93       	push	r20
 ccc:	5f 93       	push	r21
 cce:	6f 93       	push	r22
 cd0:	7f 93       	push	r23
 cd2:	8f 93       	push	r24
 cd4:	9f 93       	push	r25
 cd6:	af 93       	push	r26
 cd8:	bf 93       	push	r27
 cda:	ef 93       	push	r30
 cdc:	ff 93       	push	r31
	recebeuDado = LeSerial();	// Flag para indicar que recebeu o dado
 cde:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LeSerial>
 ce2:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <recebeuDado>
 ce6:	ff 91       	pop	r31
 ce8:	ef 91       	pop	r30
 cea:	bf 91       	pop	r27
 cec:	af 91       	pop	r26
 cee:	9f 91       	pop	r25
 cf0:	8f 91       	pop	r24
 cf2:	7f 91       	pop	r23
 cf4:	6f 91       	pop	r22
 cf6:	5f 91       	pop	r21
 cf8:	4f 91       	pop	r20
 cfa:	3f 91       	pop	r19
 cfc:	2f 91       	pop	r18
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

00000d08 <__divmodhi4>:
 d08:	97 fb       	bst	r25, 7
 d0a:	07 2e       	mov	r0, r23
 d0c:	16 f4       	brtc	.+4      	; 0xd12 <__divmodhi4+0xa>
 d0e:	00 94       	com	r0
 d10:	07 d0       	rcall	.+14     	; 0xd20 <__divmodhi4_neg1>
 d12:	77 fd       	sbrc	r23, 7
 d14:	09 d0       	rcall	.+18     	; 0xd28 <__divmodhi4_neg2>
 d16:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__udivmodhi4>
 d1a:	07 fc       	sbrc	r0, 7
 d1c:	05 d0       	rcall	.+10     	; 0xd28 <__divmodhi4_neg2>
 d1e:	3e f4       	brtc	.+14     	; 0xd2e <__divmodhi4_exit>

00000d20 <__divmodhi4_neg1>:
 d20:	90 95       	com	r25
 d22:	81 95       	neg	r24
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	08 95       	ret

00000d28 <__divmodhi4_neg2>:
 d28:	70 95       	com	r23
 d2a:	61 95       	neg	r22
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d2e <__divmodhi4_exit>:
 d2e:	08 95       	ret

00000d30 <__umulhisi3>:
 d30:	a2 9f       	mul	r26, r18
 d32:	b0 01       	movw	r22, r0
 d34:	b3 9f       	mul	r27, r19
 d36:	c0 01       	movw	r24, r0
 d38:	a3 9f       	mul	r26, r19
 d3a:	70 0d       	add	r23, r0
 d3c:	81 1d       	adc	r24, r1
 d3e:	11 24       	eor	r1, r1
 d40:	91 1d       	adc	r25, r1
 d42:	b2 9f       	mul	r27, r18
 d44:	70 0d       	add	r23, r0
 d46:	81 1d       	adc	r24, r1
 d48:	11 24       	eor	r1, r1
 d4a:	91 1d       	adc	r25, r1
 d4c:	08 95       	ret

00000d4e <__udivmodhi4>:
 d4e:	aa 1b       	sub	r26, r26
 d50:	bb 1b       	sub	r27, r27
 d52:	51 e1       	ldi	r21, 0x11	; 17
 d54:	07 c0       	rjmp	.+14     	; 0xd64 <__udivmodhi4_ep>

00000d56 <__udivmodhi4_loop>:
 d56:	aa 1f       	adc	r26, r26
 d58:	bb 1f       	adc	r27, r27
 d5a:	a6 17       	cp	r26, r22
 d5c:	b7 07       	cpc	r27, r23
 d5e:	10 f0       	brcs	.+4      	; 0xd64 <__udivmodhi4_ep>
 d60:	a6 1b       	sub	r26, r22
 d62:	b7 0b       	sbc	r27, r23

00000d64 <__udivmodhi4_ep>:
 d64:	88 1f       	adc	r24, r24
 d66:	99 1f       	adc	r25, r25
 d68:	5a 95       	dec	r21
 d6a:	a9 f7       	brne	.-22     	; 0xd56 <__udivmodhi4_loop>
 d6c:	80 95       	com	r24
 d6e:	90 95       	com	r25
 d70:	bc 01       	movw	r22, r24
 d72:	cd 01       	movw	r24, r26
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
